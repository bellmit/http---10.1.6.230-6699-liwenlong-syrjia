package cn.syrjia.hospital.controller;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import cn.syrjia.config.configCode;
import cn.syrjia.entity.Evaluate;
import cn.syrjia.entity.Order;
import cn.syrjia.hospital.entity.OrderSymptom;
import cn.syrjia.hospital.entity.PhotoMedicalRecord;
import cn.syrjia.hospital.service.DoctorOrderService;
import cn.syrjia.util.GetOpenId;
import cn.syrjia.util.Util;
import cn.syrjia.wxPay.wxPay.util.StringUtil;

@Controller
@RequestMapping("/doctorOrder")
public class DoctorOrderController {

	@Resource(name = "doctorOrderService")
	DoctorOrderService doctorOrderService;

	/**
	 * 查询用户购买服务确认页面信息
	 * 
	 * @param orderType
	 * @param doctorId
	 * @param memberId
	 * @return
	 */
	@RequestMapping("/queryConfirmDocServerData")
	@ResponseBody
	public Map<String, Object> queryConfirmDocServerData(
			HttpServletRequest request, Integer orderType, String doctorId,
			String memberId) {
		return doctorOrderService.queryConfirmDocServerData(request, orderType,
				doctorId, memberId);
	}

	/**
	 * 根据服务类型、就诊人ID查询是否存在未完成订单
	 * 
	 * @param patientId
	 * @param orderType
	 * @return
	 */
	@RequestMapping("/checkNoFinishOrderByPatientId")
	@ResponseBody
	public Map<String, Object> checkNoFinishOrderByPatientId(String patientId,String doctorId,
			Integer orderType) {
		return doctorOrderService.checkNoFinishOrderByPatientId(patientId,doctorId,
				orderType);
	}

	/**
	 * 购买医生服务生成订单
	 * 
	 * @param request
	 * @param doctorId
	 * @param patientId
	 * @param orderType
	 * @return
	 */
	@RequestMapping("/addServerOrder")
	@ResponseBody
	public Map<String, Object> addServerOrder(HttpServletRequest request,
			String doctorId, Order order) {
		return doctorOrderService.addServerOrder(request, doctorId, order);
	}

	/**
	 * 填写症状描述
	 * 
	 * @param request
	 * @param orderSymptom
	 * @return
	 */
	@RequestMapping("/addOrderSymptom")
	@ResponseBody
	public Map<String, Object> addOrderSymptom(HttpServletRequest request,
			OrderSymptom orderSymptom) {
		return doctorOrderService.addOrderSymptom(request, orderSymptom);
	}

	/**
	 * 根据订单号查询症状描述
	 * 
	 * @param request
	 * @param orderNo
	 * @return
	 */
	@RequestMapping("/queryOrderSymptomByOrderNo")
	@ResponseBody
	public Map<String, Object> queryOrderSymptomByOrderNo(
			HttpServletRequest request, String orderNo) {
		return doctorOrderService.queryOrderSymptomByOrderNo(request, orderNo);
	}

	/**
	 * 上传图片
	 * 
	 * @param multipartFile
	 * @param request
	 * @param doctorId
	 * @return
	 */
	@RequestMapping("/uploadImgs")
	@ResponseBody
	public Map<String, Object> uploadImgs(
			HttpServletRequest request,
			@RequestParam(value = "multipartFiles") MultipartFile multipartFiles,
			String doctorId, String dirName) {
		//图片上传
		Map<String, String> imageMap = Util.uploadFoodImage(multipartFiles,
				request, dirName);
		if (imageMap != null) {
			return Util.resultMap(configCode.code_1001, imageMap.get("url"));
		}
		return Util.resultMap(configCode.code_1048, null);
	}

	/**
	 * 查询同一用户是否有未处理拍方抓药
	 * 
	 * @param memberId
	 * @return
	 */
	@RequestMapping("/checkPhotoMedicalCount")
	@ResponseBody
	public Map<String, Object> checkPhotoMedicalCount(
			HttpServletRequest request, String memberId) {
		return doctorOrderService.checkPhotoMedicalCount(request, memberId);
	}

	/**
	 * 拍方抓药存入库
	 * 
	 * @param request
	 * @param photoMedical
	 * @return
	 */
	@RequestMapping("/addPhotoMedical")
	@ResponseBody
	public Map<String, Object> addPhotoMedical(HttpServletRequest request,
			PhotoMedicalRecord photoMedical,String imgUrls) {
		return doctorOrderService.addPhotoMedical(request, photoMedical,imgUrls);
	}
	
	/**
	 * 评价页面获取信息
	 * @param orderNo
	 * @param memberId
	 * @return
	 */
	@RequestMapping("/queryDoctorOrderDetail")
	@ResponseBody
	public Map<String,Object> queryDoctorOrderDetail(HttpServletRequest request,String orderNo,String memberId){
		return doctorOrderService.queryDoctorOrderDetail(request, orderNo, memberId);
	}
	
	/**
	 * 查询我的锦旗列表
	 * @param memberId
	 * @return
	 */
	@RequestMapping("/queryMyEvaBanners")
	@ResponseBody
	public Map<String, Object> queryMyEvaBanners(HttpServletRequest request,String memberId){
		if(StringUtil.isEmpty(memberId)){
			memberId = GetOpenId.getMemberId(request);
		}
		return doctorOrderService.queryMyEvaBanners(request, memberId);
	}

	/**
	 * 购买锦旗下单
	 * @param request
	 * @param paramarr
	 * @return
	 */
	@RequestMapping("/addJqOrder")
	@ResponseBody
	public Map<String,Object> addJqOrder(HttpServletRequest request,String paramarr,String memberId){
		return doctorOrderService.addJqOrder(request, paramarr, memberId);
	}
	
	/**
	 * 新增评价
	 * 
	 * @param eva
	 * @return
	 */
	@RequestMapping("/addEvaluate")
	@ResponseBody
	public Map<String,Object> addEvaluate(HttpServletRequest request,Evaluate evaluate,String labels,String jqArr,String myEvaBannersOrders) {
		return doctorOrderService.addEvaluate(request, evaluate, labels, jqArr,myEvaBannersOrders);
	}
	
	/**
	 * 当前问诊
	 * @param request
	 * @param memberId
	 * @param page
	 * @param row
	 * @return
	 */
	@RequestMapping("/queryNowInquiry")
	@ResponseBody
	public Map<String,Object> queryNowInquiry(HttpServletRequest request,String memberId,Integer page,Integer row) {
		if(StringUtil.isEmpty(memberId)){
			memberId = GetOpenId.getMemberId(request);
		}
		List<Map<String, Object>> list = doctorOrderService.queryNowInquiry(memberId, page, row);
		return Util.resultMap(configCode.code_1001, list);
	}
	
	/**
	 * 添加抄方订单
	 * @param request
	 * @param orderSymptom
	 * @return
	 */
	@RequestMapping("/addCfOrder")
	@ResponseBody
	public Map<String, Object> addCfOrder(HttpServletRequest request,
			String doctorId, String patientId) {
		return doctorOrderService.addCfOrder(request, doctorId, patientId);
	}
}
