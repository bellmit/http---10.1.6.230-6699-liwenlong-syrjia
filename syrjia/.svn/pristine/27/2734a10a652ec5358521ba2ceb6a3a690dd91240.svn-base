package cn.syrjia.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import net.sf.json.JSONObject;
import org.apache.commons.lang.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import cn.syrjia.callCenter.util.CallCenterConfig;
import cn.syrjia.callCenter.util.SendCallCenterUtil;
import cn.syrjia.config.configCode;
import cn.syrjia.entity.Member;
import cn.syrjia.entity.Piclib;
import cn.syrjia.entity.UserAdvise;
import cn.syrjia.service.MemberService;
import cn.syrjia.service.TcodeService;
import cn.syrjia.util.DateTime;
import cn.syrjia.util.GetOpenId;
import cn.syrjia.util.JsonUtil;
import cn.syrjia.util.Md5Encoder;
import cn.syrjia.util.RedisUtil;
import cn.syrjia.util.SessionUtil;
import cn.syrjia.util.StringUtil;
import cn.syrjia.util.Util;

@Controller
@RequestMapping("/member")
public class MemberController {

	private Logger logger = LogManager.getLogger(MemberController.class);

	@Resource(name = "memberService")
	MemberService memberService;

	@Resource(name = "tcodeService")
	TcodeService tcodeService;

	/**
	 * 用户注册 验证码验证
	 * 
	 * @param request
	 * @param response
	 * @param user
	 * @param code
	 * @return
	 */
	@SuppressWarnings({ "static-access", "unused" })
	@ResponseBody
	@RequestMapping(value = "/addMember")
	public Map<String, Object> register(HttpServletRequest request,
			HttpServletResponse response, Member member, String code) {
		Map<String, Object> resultMap = new HashMap<>();
		Map<String, Object> dataMap = new HashMap<>();
		try {
			//根据手机号和类型获取验证码信息
			Map<String, Object> m = tcodeService.getCodeByPhoneAndType(
					member.getLoginname(), 6);
			if (m == null) {
				resultMap.put("respCode", configCode.code_1045);
				resultMap.put("respMsg",
						configCode.codeDesc(configCode.code_1045));
				return resultMap;
			} else {
				String code2 = m.get("code").toString();
				// 验证验证码是否超时
				String codeTime = m.get("createTime").toString();
				long seconds = DateTime.codeTimeCompare(codeTime);
				Map<String, Object> memberMap = memberService
						.getByLoginname(member.getLoginname(),null);
				Object openid = SessionUtil.getOpenId(request);
				String weixinLoginname = distinctOpenid(openid);
				if (!(seconds > 0 && seconds <= 300)) {// 验证验证码是否超时
					resultMap.put("respCode", configCode.code_1046);
					resultMap.put("respMsg",
							configCode.codeDesc(configCode.code_1046));
					return resultMap;
				} else if (!code2.equals(code)) {// 验证验证码
					resultMap.put("respCode", configCode.code_1045);
					resultMap.put("respMsg",
							configCode.codeDesc(configCode.code_1045));
					return resultMap;
				} else if (memberMap != null) {
					resultMap.put("respCode", configCode.code_1004);
					resultMap.put("respMsg",
							configCode.codeDesc(configCode.code_1004));
				}else {
					Md5Encoder md5 = new Md5Encoder();
					member.setPassword(md5.getMd5(member.getPassword()));
					setOpenid(openid, member);// 获取用户信息
					Object obj = memberService.addMember(member);
					if (obj == null) {
						resultMap.put("respCode", configCode.code_1005);
						resultMap.put("respMsg",
								configCode.codeDesc(configCode.code_1005));
					} else {
						resultMap.put("respCode", configCode.code_1001);
						resultMap.put("respMsg",
								configCode.codeDesc(configCode.code_1001));
						dataMap.put("user", memberMap);
						resultMap.put("datas", dataMap);
					}
				}
			}
		} catch (Exception e) {
			logger.info(e + "异常信息");
		}
		return resultMap;
	}

	/**
	 * 设置openid
	 * @param openid
	 * @param member
	 */
	private void setOpenid(Object openid, Member member) {
		try {
			if (!StringUtil.isEmpty(openid)) {
				memberService.clearByOpenid(openid.toString());
				// 获取微信用户信息
				Map<String, Object> weixinMap = memberService
						.getWeixinByOpenid(openid.toString());
				if (null != weixinMap.get("nickname")
						&& StringUtil.isEmpty(member.getRealname())) {
					member.setRealname(weixinMap.get("nickname").toString());
				}
				if (null != weixinMap.get("headimgurl")
						&& StringUtil.isEmpty(member.getPhoto())) {
					member.setHeadicon(weixinMap.get("headimgurl").toString());
					member.setPhoto(weixinMap.get("headimgurl").toString());
				}
				member.setOpenid(openid.toString());
			}
		} catch (Exception e) {
			logger.info(e + "异常信息");
		}
	}

	// 查看openid账号下是否存在用户信息
	private String distinctOpenid(Object openid) {
		/*
		 * if (!StringUtil.isEmpty(openid)) { Member user = new Member();
		 * user.setOpenid(openid.toString()); user =
		 * memberService.queryByEntity(user); System.out.println("获取openid:" +
		 * openid.toString()); if (null != user) { System.out.println("获取用户:" +
		 * user.getLoginname()); return user.getLoginname(); } }
		 */
		return "";
	}

	/**
	 * 生成随机数
	 * @param min
	 * @param max
	 * @param n
	 * @return
	 */
	public int[] randomNO(int min, int max, int n) {
		int len = max - min + 1;
		int[] source = new int[len];
		if (max < min || n > len) {
			return null;
		}
		for (int i = min; i < min + len; i++) {
			source[i - min] = i;
		}
		int[] result = new int[n];
		Random rd = new Random();
		int index = 0;
		for (int i = 0; i < result.length; i++) {
			index = Math.abs(rd.nextInt() % len--);
			result[i] = source[index];
			source[index] = source[len];
		}
		return result;
	}

	/**
	 * 个人信息修改
	 * 
	 * @param user
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/updateInfo")
	public Map<String, Object> updateInfo(Member user, String birthdayTime) {
		Map<String, Object> resultMap = new HashMap<>();
		int obj = 0;
		try {
			//非空判断
			if (!StringUtils.isEmpty(birthdayTime)) {
				user.setBirthday(birthdayTime);
				//执行更新
				obj = memberService.updateUserBirthday(user.getId(),
						birthdayTime);
			} else {
				//更新
				obj = memberService.updateEntity(user);
			}
			if (obj > 0) {
				resultMap.put("user",memberService.queryMembersById(user.getId()));
				resultMap.put("respCode", configCode.code_1001);
				resultMap.put("respMsg",
						configCode.codeDesc(configCode.code_1001));
			} else {
				resultMap.put("respCode", configCode.code_1020);
				resultMap.put("respMsg",
						configCode.codeDesc(configCode.code_1020));
			}
		} catch (Exception e) {
			logger.info(e + "异常信息");
		}
		return resultMap;
	}

	/**
	 * 忘记密码
	 * 
	 * @param userid
	 * @param newpassword
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/remeberPasword")
	public Map<String, Object> remeberPasword(String loginname,
			String newpassword, String code) {
		Map<String, Object> resultMap = new HashMap<>();
		try {
			//非空判断
			if (StringUtil.isEmpty(loginname) || StringUtil.isEmpty(code)
					|| StringUtil.isEmpty(newpassword)) {
				resultMap.put("respCode", configCode.code_1029);
				resultMap.put("respMsg",
						configCode.codeDesc(configCode.code_1029));
			} else {
				// 查询验证码
				Map<String, Object> m = tcodeService.getCodeByPhoneAndType(
						loginname, 2);
				Map<String, Object> member = memberService
						.getByLoginname(loginname,null);
				if (m == null) {
					resultMap.put("respCode", configCode.code_1045);
					resultMap.put("respMsg",
							configCode.codeDesc(configCode.code_1045));
				} else {
					if (member == null) {
						resultMap.put("respCode", configCode.code_1002);
						resultMap.put("respMsg",
								configCode.codeDesc(configCode.code_1002));
					} else if (Integer.valueOf(member.get("state").toString()) == 2) {
						resultMap.put("respCode", configCode.code_1009);
						resultMap.put("respMsg",
								configCode.codeDesc(configCode.code_1009));
					} else if (Integer.valueOf(member.get("state").toString()) == 3) {
						resultMap.put("respCode", configCode.code_1002);
						resultMap.put("respMsg",
								configCode.codeDesc(configCode.code_1002));
					} else {
						String code2 = m.get("code").toString();
						// 验证验证码是否超时
						String codeTime = m.get("createTime").toString();
						long seconds = DateTime.codeTimeCompare(codeTime);
						if (!(seconds > 0 && seconds <= 300)) {// 验证验证码是否超时
							resultMap.put("respCode", configCode.code_1046);
							resultMap.put("respMsg",
									configCode.codeDesc(configCode.code_1046));
						} else if (!code2.equals(code)) {// 验证验证码
							resultMap.put("respCode", configCode.code_1045);
							resultMap.put("respMsg",
									configCode.codeDesc(configCode.code_1045));
						} else if (null == loginname || "".equals(loginname)
								|| null == newpassword
								|| "".equals(newpassword) || null == code
								|| "".equals(code)) {
							resultMap.put("respCode", configCode.code_1047);
							resultMap.put("respMsg",
									configCode.codeDesc(configCode.code_1047));
						} else {
							int obj = 0;
							if (member != null) {
								obj = memberService.updatePassWord(
										Md5Encoder.getMd5(newpassword),
										loginname);
							}
							if (obj > 0) {
								resultMap.put("user", member);
								resultMap.put("respCode", configCode.code_1001);
								resultMap.put("respMsg", configCode
										.codeDesc(configCode.code_1001));
							} else {
								resultMap.put("respCode", configCode.code_1002);
								resultMap.put("respMsg", configCode
										.codeDesc(configCode.code_1002));
							}
						}
					}
				}
			}
		} catch (Exception e) {
			logger.info(e + "异常信息");
		}
		return resultMap;
	}

	/**
	 * 找回密码/修改密码 验证码验证
	 * 
	 * @param phone
	 *            手机号
	 * @return
	 */
	@RequestMapping(value = "verificationCodeForPassword")
	@ResponseBody
	public Map<String, Object> verificationCodeForPassword(String loginname,
			String code) {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			// 查询验证码
			Map<String, Object> m = tcodeService.getCodeByPhoneAndType(
					loginname, 2);
			String code2 = m.get("code").toString();
			// 验证验证码是否超时
			String codeTime = m.get("createTime").toString();
			long seconds = DateTime.codeTimeCompare(codeTime);
			if (!(seconds > 0 && seconds <= 300)) {// 验证验证码是否超时
				map.put("respCode", configCode.code_1046);
				map.put("respMsg", configCode.codeDesc(configCode.code_1046));
				return map;
			} else if (!code2.equals(code)) {// 验证验证码
				map.put("respCode", configCode.code_1045);
				map.put("respMsg", configCode.codeDesc(configCode.code_1045));
			} else {
				map.put("respCode", configCode.code_1001);
				map.put("respMsg", configCode.codeDesc(configCode.code_1001));
			}
		} catch (Exception e) {
			logger.info(e + "异常信息");
		}
		return map;
	}

	/**
	 * 获取验证码
	 * 
	 * @param phone
	 *            接收验证码手机号
	 * @return
	 */
	@RequestMapping(value = "getPhoneCode")
	@ResponseBody
	public Map<String, Object> getPhoneCode(String loginname, Integer type,
			HttpServletRequest request,String memberId) {
		return memberService.getPhoneCode(request, loginname, type,memberId);
	}

	/**
	 * 上传或修改头像
	 * 
	 * @param id
	 * @param image
	 * @return
	 */
	@RequestMapping(value = "upoadpic")
	@ResponseBody
	public Map<String, Object> uploadpic(HttpServletRequest request, String id,
			@RequestParam(value = "image") MultipartFile image) {
		Map<String, Object> map = memberService.insertUserHeadInfo(image, id,
				request);
		return map;
	}

	/**
	 * 注销接口，清空token
	 * 
	 * @Description: TODO
	 * @param @param umUser
	 * @param @return
	 * @return Map<String,Object>
	 * @throws
	 * @author 王昭阳
	 * @date 2017-6-20
	 */
	@RequestMapping(value = "logout")
	@ResponseBody
	public Map<String, Object> logout(HttpServletRequest request,String userid) {
		Map<String, Object> resultmMap = new HashMap<String, Object>();
		//注销，清空token信息
		Integer flag = memberService.logout(userid);
		if (flag > 0) {
			//设置session
			request.getSession().removeAttribute("memberId");
			request.getSession().invalidate();
			System.out.println(GetOpenId.getMemberId(request));
			resultmMap.put("respCode", configCode.code_1001);
			resultmMap
					.put("respMsg", configCode.codeDesc(configCode.code_1001));
			resultmMap.put("datas", "logout success");
		} else {
			resultmMap.put("respCode", configCode.code_1051);
			resultmMap
					.put("respMsg", configCode.codeDesc(configCode.code_1051));
			resultmMap.put("datas", "logout fail");
		}
		return resultmMap;
	}

	/**
	 * 判断微信用户是否已经注册
	 * 
	 * @Description: TODO
	 * @param @return
	 * @return Map<String,Object>
	 * @throws
	 * @author 王昭阳
	 * @date 2017-6-20
	 */
	@RequestMapping(value = "judgeWXuser")
	@ResponseBody
	public Map<String, Object> judgeWXuser(HttpServletRequest request) {
		// 获取session中的openid
		return memberService.getWeixinByOpenid(SessionUtil.getOpenId(request));
	}

	/**
	 * 获取个人信息
	 * 
	 * @Description: TODO
	 * @param @return
	 * @return Member
	 * @throws
	 * @date 2017-12-21
	 */
	@RequestMapping(value = "getMember")
	@ResponseBody
	public Map<String, Object> getMember(HttpServletRequest request) {
		String memberId = GetOpenId.getMemberId(request);
		System.out.println("getMember获取到的memberId"+memberId);
		logger.info("getMember获取到的memberId"+memberId);
		Map<String,Object> memberMap = memberService.queryMemberOne(memberId);
		logger.info("根据memberId"+memberId+"的查询结果:"+memberMap);
		if(null!=memberMap){
			return Util.resultMap(configCode.code_1001,memberMap);
		}else{
			return Util.resultMap(configCode.code_1056,null);
		}
		/*if(StringUtil.isEmpty(memberId)){
			if(StringUtil.isEmpty(openId)){
				return Util.resultMap(configCode.code_1056, null);
			}else{
				Map<String,Object> memberMap = memberService.getMemberByOpenid(openId);
				if(memberMap!=null){
					request.getSession().setAttribute("memberId",memberMap.get("id"));
					request.getSession().setAttribute("phone",memberMap.get("phone"));
					request.getSession().setAttribute("loginname",memberMap.get("realname"));
					request.getSession().setAttribute("openId",openId);
					memberId=memberMap.get("id").toString();
				}else{
					return Util.resultMap(configCode.code_1056, null);
				}
			}
		}
		
		Map<String,Object> member = memberService.queryMembersById(memberId);
		if(member==null){
			System.out.println("&&&&&&&&&&member"+memberId+"$$$$"+member);
			Map<String,Object> weiXinUser = memberService.queryWxUserByOpenId(memberId);
			System.out.println("&&&&&&&&&&member"+weiXinUser+"$$$$"+weiXinUser);
			if(weiXinUser==null){
				return Util.resultMap(configCode.code_1056, null);
			}else{
				System.out.println("&&&&&&&&&&member"+weiXinUser.get("openId")+"$$$$"+weiXinUser);
				Member newMember = new Member();
				newMember.setId(weiXinUser.get("openId").toString());
				newMember.setRealname(weiXinUser.get("nickName").toString());
				newMember.setOpenid(weiXinUser.get("openId").toString());
				newMember.setSex(Integer.valueOf(weiXinUser.get("sex").toString()));
				newMember.setHeadicon(weiXinUser.get("headImgUrl").toString());
				newMember.setPhoto(weiXinUser.get("headImgUrl").toString());
				newMember.setCreatetime(Util.queryNowTime());
				newMember.setAddWay("wx");
				System.out.println("&&&&&&&&&&$$$$$member"+weiXinUser.get("openId")+"$$$$"+weiXinUser);
				memberService.addEntity(newMember);
			}
		}
		return Util.resultMap(configCode.code_1001, member);*/
	}

	/**
	 * 扫码打卡接口
	 * 
	 * @param request
	 * @param userid
	 * @param state
	 * @return
	 */
	@RequestMapping(value = "userClockOn")
	@ResponseBody
	public Map<String, Object> userClockOn(HttpServletRequest request,
			String userid, Integer state, String _sign) {
		return memberService.userClockOn(request, userid, state, _sign);
	}

	/**
	 * 更新用户的登录数据
	 * @param request
	 * @param umUser
	 * @return
	 */
	@RequestMapping(value = "updateUserLoginData")
	@ResponseBody
	public Map<String, Object> updateUserLoginData(HttpServletRequest request,
			Member umUser) {
		return memberService.updateUserLoginData(request, umUser);
	}

	/**
	 * 添加
	 * @param request
	 * @param userAdvise
	 * @return
	 */
	@RequestMapping(value = "addUserAdvise")
	@ResponseBody
	public Object addUserAdvise(HttpServletRequest request,
			UserAdvise userAdvise) {
		List<Piclib> piclist = userAdvise.getPiclist();
		return memberService.addUserAdvise(userAdvise, piclist, request);
	}

	/**
	 * 查询用户的赞同
	 * @param type
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/queryUserAgree")
	public Map<String, Object> queryUserAgree(String type) {
		return Util.resultMap(configCode.code_1001, memberService.getSysSet());
	}

	/**
	 * 绑定手机号
	 * 
	 * @Description: TODO
	 * @param @param phone
	 * @param @param code
	 * @param @param userid
	 * @param @return
	 * @return Map<String,Object>
	 * @throws
	 * @date 2018-3-23
	 */
	@ResponseBody
	@RequestMapping(value = "/bindPhone")
	public Map<String, Object> bindPhone(HttpServletRequest request,String phone, String code,
			String loginname,Integer type,String memberId) {
		Map<String, Object> resultMap = new HashMap<>();
		try {
			//非空判断
			if(StringUtil.isEmpty(memberId)){
				memberId = GetOpenId.getMemberId(request);
			}
			if (StringUtil.isEmpty(memberId) || StringUtil.isEmpty(phone)
					|| StringUtil.isEmpty(code)) {
				resultMap.put("respCode", configCode.code_1029);
				resultMap.put("respMsg",
						configCode.codeDesc(configCode.code_1029));
			} else {
				// 查询验证码
				Map<String, Object> m = tcodeService.getCodeByPhoneAndType(
						phone, type);
				Map<String, Object> member = memberService
						.getByLoginname(null,memberId);
				if (m == null) {
					resultMap.put("respCode", configCode.code_1045);
					resultMap.put("respMsg",
							configCode.codeDesc(configCode.code_1045));
				} else {
					if (member == null) {
						resultMap.put("respCode", configCode.code_1002);
						resultMap.put("respMsg",
								configCode.codeDesc(configCode.code_1002));
					} else if (Integer.valueOf(member.get("state").toString()) == 2) {
						resultMap.put("respCode", configCode.code_1009);
						resultMap.put("respMsg",
								configCode.codeDesc(configCode.code_1009));
					} else if (Integer.valueOf(member.get("state").toString()) == 3) {
						resultMap.put("respCode", configCode.code_1002);
						resultMap.put("respMsg",
								configCode.codeDesc(configCode.code_1002));
					} else {
						String code2 = m.get("code").toString();
						// 验证验证码是否超时
						String codeTime = m.get("createTime").toString();
						long seconds = DateTime.codeTimeCompare(codeTime);
						if (!(seconds > 0 && seconds <= 180)) {// 验证验证码是否超时
							resultMap.put("respCode", configCode.code_1046);
							resultMap.put("respMsg",
									configCode.codeDesc(configCode.code_1046));
						} else if (!code2.equals(code)) {// 验证验证码
							resultMap.put("respCode", configCode.code_1045);
							resultMap.put("respMsg",
									configCode.codeDesc(configCode.code_1045));
						} else {
							if(type!=5){
								memberService.updateCodeState(phone, type, code);
								resultMap.put("user", member);
								resultMap.put("respCode", configCode.code_1001);
								resultMap.put("respMsg", configCode.codeDesc(configCode.code_1001));
							}else{
								int obj = 0;
								if (member != null && phone.length() > 8) {
									obj = memberService.updatePhone(request,phone,
											loginname,code,memberId);
								}
								if (obj > 0 || (obj == 0 && phone.length() < 8)) {
									try {
										memberService.updateCodeState(phone, type, code);
										member.put("phone", phone);
										Map<String,Object> param = JsonUtil.jsonToMap(JSONObject.fromBean(member));
										String result = SendCallCenterUtil.sendCallCenterData(param,CallCenterConfig.CustomersBase);
										System.out.println(result);
									} catch (Exception e) {
										System.out.println(e);
									}
									resultMap.put("user", member);
									resultMap.put("respCode", configCode.code_1001);
									resultMap.put("respMsg", configCode.codeDesc(configCode.code_1001));
								} else {
									resultMap.put("respCode", configCode.code_1002);
									resultMap.put("respMsg", configCode
											.codeDesc(configCode.code_1002));
								}
							}
						}
					}
				}
			}
		} catch (Exception e) {
			logger.info(e + "异常信息");
		}
		return resultMap;
	}
	
	/**
	 * 检验用户是否绑定安全手机号
	 * @param request
	 * @param memberId
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/checkMemberIsBindPhone")
	public Map<String,Object> checkMemberIsBindPhone(HttpServletRequest request,String memberId){
		return memberService.checkMemberIsBindPhone(request, memberId);
	}
	
	/**
	 * 注册redis
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/registerRedisOpenId")
	public Integer registerRedisOpenId(){
		List<Map<String,Object>> list = memberService.queryBysqlList("SELECT id from t_member ORDER BY createtime DESC limit 67500,20000", null);
		for(int i=0;i<list.size();i++){
			String openid = list.get(i).get("id").toString();
			Object obj = RedisUtil.getVal(openid);
			Object memberId = null;
			if (!StringUtil.isEmpty(obj)) {//如果已有toeken则把旧token返回
				JSONObject json = JSONObject.fromObject(obj);
				memberId = json.has("memberId")?json.get("memberId"):null;
			}
			if(StringUtil.isEmpty(memberId)){
				try {
					JSONObject json = new JSONObject();
					json.set("memberId", openid);
					RedisUtil.setVal(openid, 60 * 60 * 24*365,json.toString());
				} catch (Exception e) {
					System.out.println(e);
				}
			}
			System.out.println("当前为第"+i+"条");
		}
		return 1;
	}
	
}
