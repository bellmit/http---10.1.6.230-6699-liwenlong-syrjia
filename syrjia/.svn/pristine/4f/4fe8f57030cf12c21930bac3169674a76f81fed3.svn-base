package cn.syrjia.hospital.controller;

import cn.syrjia.config.configCode;
import cn.syrjia.entity.Evaluate;
import cn.syrjia.entity.LoginLog;
import cn.syrjia.hospital.entity.*;
import cn.syrjia.hospital.service.AppDoctorService;
import cn.syrjia.hospital.service.DoctorService;
import cn.syrjia.util.GetSig;
import cn.syrjia.util.Producer;
import cn.syrjia.util.StringUtil;
import cn.syrjia.util.Util;
import cn.syrjia.weixin.util.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller
@RequestMapping("appDoctor")
public class AppDoctorCenterContorller {

	@Resource(name = "appDoctorService")
	AppDoctorService appDoctorService;

	@Resource(name = "doctorService")
	DoctorService doctorService;

	/**
	 * 医师本月是否群发
	 * 
	 * @param request
	 * @param knowledge
	 * @param type
	 * @param page
	 * @param row
	 * @return
	 */
	@RequestMapping("/queryDoctorSendNotice")
	@ResponseBody
	public Map<String, Object> queryDoctorSendNotice(
			HttpServletRequest request, String doctorId) {
		Integer i = appDoctorService.queryDoctorSendNotice(doctorId);
		return Util.resultMap(configCode.code_1001, i);
	}

	/**
	 * 公告列表
	 * 
	 * @param request
	 * @param knowledge
	 * @param type
	 * @param page
	 * @param row
	 * @return
	 */
	@RequestMapping("/queryNoticeList")
	@ResponseBody
	public Map<String, Object> queryNoticeList(HttpServletRequest request,
			String doctorId, Integer state, Integer page, Integer row) {
		List<Map<String, Object>> notices = appDoctorService.queryNoticeList(
				doctorId, state, page, row);
		if (null == notices) {
			return Util.resultMap(configCode.code_1015, null);
		}
		return Util.resultMap(configCode.code_1001, notices);
	}

	/**
	 * 编辑公告
	 * 
	 * @param request
	 * @param doctorNotice
	 * @return
	 */
	@RequestMapping("/editNotice")
	@ResponseBody
	public Map<String, Object> editNotice(HttpServletRequest request,
			DoctorNotice doctorNotice) {
		return appDoctorService.editNotice(doctorNotice);
	}

	/**
	 * 查询公告信息
	 * 
	 * @param request
	 * @param id
	 * @return
	 */
	@RequestMapping("/queryNoticeDetailById")
	@ResponseBody
	public Map<String, Object> queryNoticeDetailById(
			HttpServletRequest request, String id) {
		return appDoctorService.queryNoticeDetail(id);
	}

	/**
	 * 删除公告
	 * 
	 * @param request
	 * @param id
	 * @return
	 */
	@RequestMapping("/deleteNoticeById")
	@ResponseBody
	public Map<String, Object> deleteNoticeById(HttpServletRequest request,
			String id) {
		return appDoctorService.deleteNoticeById(id);
	}

	/**
	 * 查询公告每天发送量
	 * 
	 * @param request
	 * @param doctorId
	 * @return
	 */
	@RequestMapping("/checkNoticeDaySendCount")
	@ResponseBody
	public Map<String, Object> checkNoticeDaySendCount(
			HttpServletRequest request, String doctorId) {
		return appDoctorService.checkNoticeDaySendCount(doctorId);
	}

	/**
	 * 根据医生Id查询患者列表
	 * 
	 * @param doctorId
	 * @param _sign
	 * @param page
	 * @param row
	 * @return
	 */
	@RequestMapping("/queryPatientListById")
	@ResponseBody
	public Map<String, Object> queryPatientListById(String doctorId,
			String _sign, Integer page, Integer row, String name) {
		return appDoctorService.queryPatientListById(doctorId, _sign, page,
				row, name);
	}

	/**
	 * 根据患者ID查询患者管理信息
	 * 
	 * @param patientId
	 * @param page
	 * @param row
	 * @return
	 */
	@RequestMapping("/queryPatientManageById")
	@ResponseBody
	public Map<String, Object> queryPatientManageById(String patientId,
			String doctorId) {
		return appDoctorService.queryPatientManageById(patientId, doctorId);
	}

	/**
	 * 根据患者ID查询患者信息
	 * 
	 * @param patientId
	 * @return
	 */
	@RequestMapping("/queryPatientById")
	@ResponseBody
	public Map<String, Object> queryPatientById(String patientId) {
		return appDoctorService.queryPatientById(patientId);
	}

	/**
	 * 编辑患者管理中信息（特别关注等）
	 * 
	 * @param patientId
	 * @return
	 */
	@RequestMapping("/editPatientManage")
	@ResponseBody
	public Map<String, Object> editPatientManage(DoctorPatient docPatient) {
		return appDoctorService.editPatientManage(docPatient);
	}

	/**
	 * 编辑认证资料
	 * 
	 * @param illIds
	 * @param request
	 * @param record
	 * @param infirmaryIds
	 * @param infirDepartIds
	 * @param doctorId
	 * @return
	 */
	@RequestMapping("/editDoctorData")
	@ResponseBody
	public Map<String, Object> editDoctorData(String illIds,
			HttpServletRequest request, DoctorApplyRecord record,
			String infirmaryIds, String infirDepartIds, String doctorId) {
		return appDoctorService.addApplyDoc(request, record, null, null, null,
				doctorId);
	}

	/**
	 * 点击助理提交修改状态
	 * 
	 * @param applyRecord
	 * @return
	 */
	@RequestMapping("/updateApplyRecordState")
	@ResponseBody
	public Map<String, Object> updateApplyRecordState(
			DoctorApplyRecord applyRecord) {
		return appDoctorService.updateApplyRecordState(applyRecord);
	}

	/**
	 * 修改医生认证、基础信息
	 * 
	 * @param request
	 * @param record
	 * @param type
	 *            1-修改基础资料 2-修改认证资料（图片）
	 * @return
	 */
	@RequestMapping("/updateApplyDoc")
	@ResponseBody
	public Map<String, Object> updateApplyDoc(HttpServletRequest request,
			DoctorApplyRecord record, Integer type, String doctorId) {
		return appDoctorService.editApplyDoc(request, record, type, doctorId);
	}

	/**
	 * 查询医生评价统计信息
	 * 
	 * @param request
	 * @param doctorId
	 * @return
	 */
	@RequestMapping("/queryDoctorEvaCensus")
	@ResponseBody
	public Map<String, Object> queryDoctorEvaCensus(HttpServletRequest request,
			String doctorId) {
		return appDoctorService.queryDoctorEvaCensus(doctorId);
	}

	/**
	 * 查询医生评价列表（详情、列表共用）
	 * 
	 * @param doctorId
	 * @param row
	 * @param page
	 * @param _sign
	 * @return
	 */
	@RequestMapping("/queryDoctorEvaList")
	@ResponseBody
	public Map<String, Object> queryDoctorEvaList(String doctorId, Integer row,
			Integer page, String _sign) {
		return appDoctorService.queryDoctorEvaList(doctorId, row, page, _sign);
	}

	/**
	 * 回复评论接口
	 * 
	 * @param evaluate
	 * @return
	 */
	@RequestMapping("/replyMemberEva")
	@ResponseBody
	public Map<String, Object> replyMemberEva(Evaluate evaluate,
			String repalyContent) {
		return appDoctorService.replyMemberEva(evaluate, repalyContent);
	}

	/**
	 * 删除评论接口
	 * 
	 * @param evaluate
	 * @return
	 */
	@RequestMapping("/updateEvaState")
	@ResponseBody
	public Map<String, Object> updateEvaState(Evaluate evaluate) {
		return appDoctorService.updateEvaState(evaluate);
	}

	/**
	 * 查询医生线上调理设置详情
	 * 
	 * @return
	 */
	@RequestMapping("/queryDoctorSetById")
	@ResponseBody
	public Map<String, Object> queryDoctorSetById(String doctorId) {
		Map<String, Object> doctorSet = doctorService.queryDoctorSet(doctorId);
		if (doctorSet == null) {
			return Util.resultMap(configCode.code_1011, null);
		}
		return Util.resultMap(configCode.code_1001, doctorSet);
	}

	/**
	 * 编辑医生线上调理设置详情 type 1-服务设置
	 * 
	 * @return
	 */
	@RequestMapping("/editDoctorSet")
	@ResponseBody
	public Map<String, Object> editDoctorSet(DoctorSet doctorSet, String type) {
		return appDoctorService.editDoctorSet(doctorSet, type);
	}

	/**
	 * 获取验证码接口
	 * 
	 * @return
	 */
	@RequestMapping("/getPhoneCode")
	@ResponseBody
	public Map<String, Object> getPhoneCode(HttpServletRequest request,
			String doctorId, String phone, Integer type) {
		return appDoctorService.getPhoneCode(request, doctorId, phone, type);
	}

	/**
	 * 验证手机号接口
	 * 
	 * @return
	 */
	@RequestMapping("/checkDoctorPhone")
	@ResponseBody
	public Map<String, Object> checkDoctorPhone(String oldPhone,
			String doctorId, String newPhone) {
		return appDoctorService.checkDoctorPhone(oldPhone, doctorId, newPhone);
	}

	/**
	 * 验证老手机号及验证码接口
	 * 
	 * @return
	 */
	@RequestMapping("/validateCode")
	@ResponseBody
	public Map<String, Object> validateCode(String phone, String doctorId,
			String code) {
		return appDoctorService.validateCode(phone, doctorId, code);
	}

	/**
	 * 修改医生手机号
	 * 
	 * @param phone
	 * @param code
	 * @param doctorId
	 * @return
	 */
	@RequestMapping("/updateDocPhone")
	@ResponseBody
	public Map<String, Object> updateDocPhone(HttpServletRequest request,
			String phone, String code, String doctorId) {
		return appDoctorService.updateDocPhone(request, phone, code, doctorId);
	}

	/**
	 * app登录接口
	 * 
	 * @return
	 */
	@RequestMapping("/login")
	@ResponseBody
	public Map<String, Object> login(HttpServletRequest request,
			String loginName, String code, LoginLog loginLog) {
		return appDoctorService.login(request, loginName, code, loginLog);
	}

	/**
	 * app登录接口
	 * 
	 * @return
	 */
	@RequestMapping("/register")
	@ResponseBody
	public Map<String, Object> register(HttpServletRequest request,
			String phone, String docName, String srId, String code) {
		return appDoctorService.register(request, phone, docName, srId, code);
	}

	/**
	 * app注销登录接口
	 * 
	 * @return
	 */
	@RequestMapping("/loginOut")
	@ResponseBody
	public Map<String, Object> loginOut(HttpServletRequest request,
			String oldToken, String userId) {
		return appDoctorService.loginOut(oldToken, userId);
	}

	/**
	 * app获取医生信息接口
	 * 
	 * @return
	 */
	@RequestMapping("/queryOneDoctor")
	@ResponseBody
	public Map<String, Object> queryOneDoctor(HttpServletRequest request,
			String doctorId) {
		return appDoctorService.queryOneDoctor(doctorId);
	}

	/**
	 * app获取医生认证信息接口
	 * 
	 * @return
	 */
	@RequestMapping("/queryDoctorApplyData")
	@ResponseBody
	public Map<String, Object> queryDoctorApplyData(HttpServletRequest request,
			String doctorId) {
		return appDoctorService.queryDoctorApplyData(doctorId);
	}

	/**
	 * app获取医生认证基础数据接口
	 * 
	 * @return
	 */
	@RequestMapping("/queryDoctorAuthData")
	@ResponseBody
	public Map<String, Object> queryDoctorAuthData(HttpServletRequest request) {
		return appDoctorService.queryDoctorAuthData();
	}

	/**
	 * 上传评价图片
	 * 
	 * @param multipartFile
	 * @param request
	 * @param doctorId
	 * @return
	 */
	@RequestMapping("/uploadImgs")
	@ResponseBody
	public Map<String, Object> uploadImgs(
			HttpServletRequest request,
			@RequestParam(value = "multipartFiles") MultipartFile multipartFiles,
			String doctorId, String dirName) {
		//上传图片
		Map<String, String> imageMap = Util.uploadFoodImage(multipartFiles,
				request, dirName);
		if (imageMap == null) {
			//上传失败
			return Util.resultMap(configCode.code_1048, "");
		}
		if (!StringUtil.isEmpty(dirName)) {
			if ("docUrl".equals(dirName)) {
				if (StringUtil.isEmpty(doctorId)) {
					//参数不正确
					return Util.resultMap(configCode.code_1029, "");
				} else {
					//修改医生头像
					return appDoctorService
							.updateDoctor(doctorId, imageMap.get("riskPath"),
									imageMap.get("url"), null);
				}
			} else if ("applyDoctor".equals(dirName)) {
				return Util
						.resultMap(configCode.code_1001, imageMap.get("url"));
			} else if ("knowCircle".equals(dirName)) {
				return Util
						.resultMap(configCode.code_1001, imageMap.get("url"));
			} else if ("drugPhoto".equals(dirName)) {
				return Util
						.resultMap(configCode.code_1001, imageMap.get("url"));
			}
		}
		return Util.resultMap(configCode.code_1048, null);
	}

	/**
	 * 修改医生个人简介信息
	 * 
	 * @param request
	 * @param abstractRecord
	 * @return
	 */
	@RequestMapping("/editDocAbstract")
	@ResponseBody
	public Map<String, Object> editDocAbstract(HttpServletRequest request,
			DoctorAbstractRecord abstractRecord, String srId) {
		return appDoctorService.editDocDesc(abstractRecord, srId);
	}

	/**
	 * 检验医生手势密码、数字密码是否正确
	 * 
	 * @param request
	 * @param doctorSet
	 * @return
	 */
	@RequestMapping("/checkDoctorPassword")
	@ResponseBody
	public Map<String, Object> checkDoctorPassword(HttpServletRequest request,
			DoctorSet doctorSet) {
		return appDoctorService.checkDoctorPassword(doctorSet);
	}

	/**
	 * 获取坐诊信息列表
	 * 
	 * @param request
	 * @param doctorId
	 * @param zzDate
	 * @return
	 */
	@RequestMapping("/queryDoctorZzList")
	@ResponseBody
	public Map<String, Object> queryDoctorZzList(HttpServletRequest request,
			String doctorId, String zzDate) {
		return appDoctorService.queryDoctorZzList(doctorId, zzDate);
	}

	/**
	 * 获取坐诊状态
	 * 
	 * @param request
	 * @param doctorId
	 * @param zzDate
	 * @return
	 */
	@RequestMapping("/queryZzDataCountByDocId")
	@ResponseBody
	public Map<String, Object> queryZzDataCountByDocId(
			HttpServletRequest request, String doctorId) {
		return doctorService.queryZzDataCountByDocId(doctorId);
	}

	/**
	 * 编辑坐诊信息
	 * 
	 * @param request
	 * @param zzData
	 *            坐诊实体
	 * @param repeatWay
	 *            重复方式
	 * @param zzDates
	 *            自定义日期区间 以英文“,”分隔
	 * @return
	 */
	@RequestMapping("/editDoctorZzData")
	@ResponseBody
	public Map<String, Object> editDoctorZzData(HttpServletRequest request,
			DoctorZzData zzData, String zzDates) {
		return appDoctorService.editDoctorZzData(zzData, zzDates);
	}

	/**
	 * 查询一周日期
	 * 
	 * @return
	 */
	@RequestMapping("/queryWeekData")
	@ResponseBody
	public Map<String, Object> queryWeekData() {
		return appDoctorService.queryWeekData();
	}

	/**
	 * 根据医生ID查询医生14天出诊状态
	 * 
	 * @param doctorId
	 * @return
	 */
	@RequestMapping("/queryFourTeenZzStatus")
	@ResponseBody
	public Map<String, Object> queryFourTeenZzStatus(String doctorId) {
		return appDoctorService.queryFourTeenZzStatus(doctorId);
	}

	/**
	 * 删除坐诊信息
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/updateDoctroZzState")
	@ResponseBody
	public Map<String, Object> updateDoctroZzState(String id) {
		return appDoctorService.updateDoctroZzState(id);
	}

	/**
	 * 获取医院列表
	 * 
	 * @return
	 */
	@RequestMapping("/queryInfirmaryList")
	@ResponseBody
	public Map<String, Object> queryInfirmaryList(String name, Integer page,
			Integer row) {
		return appDoctorService.queryInfirmaryList(name, page, row);
	}

	/**
	 * 根据坐诊ID查询坐诊信息
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/queryDoctorZzDataById")
	@ResponseBody
	public Map<String, Object> queryDoctorZzDataById(String id) {
		return appDoctorService.queryDoctorZzDataById(id);
	}

	/**
	 * 根据医生id获取问诊单/复诊单
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/querySpecialTest")
	@ResponseBody
	public Map<String, Object> querySpecialTest(String doctorId, Integer type) {
		return appDoctorService.querySpecialTest(doctorId, type);
	}

	/**
	 * 根据医生id获取问诊单/复诊单
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/querySpecialTestClassic")
	@ResponseBody
	public Map<String, Object> querySpecialTestClassic(String name,
			Integer page, Integer row) {
		return appDoctorService.querySpecialTestClassic(name, page, row);
	}

	/**
	 * 根据问诊单/复诊单id获取问诊单/复诊单详情
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/querySpecialTestDetail")
	@ResponseBody
	public Map<String, Object> querySpecialTestDetail(String testId) {
		return appDoctorService.querySpecialTestDetail(testId);
	}

	/**
	 * 根据问诊单/复诊单id获取问诊单/复诊单详情
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/querySpecialTestDetailById")
	@ResponseBody
	public Map<String, Object> querySpecialTestDetailById(String testId) {
		return appDoctorService.querySpecialTestDetailById(testId);
	}

	/**
	 * 根据调理方模板id获取模板详情
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/queryConditioningDetail")
	@ResponseBody
	public Map<String, Object> queryConditioningDetail(String conditioningId) {
		return appDoctorService.queryConditioningDetail(conditioningId);
	}

	/**
	 * 添加问诊单/复诊单
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/addOrUpdateSpecialTest")
	@ResponseBody
	public Map<String, Object> addOrUpdateSpecialTest(String doctorId,
			Integer type, Integer isSurface, Integer isTongue,
			String otherName, Integer isOther, String testId, String testName,
			String test) {
		return appDoctorService
				.addOrUpdateSpecialTest(doctorId, type, isSurface, isTongue,
						otherName, isOther, testId, testName, test);
	}

	/**
	 * 问诊单/复诊单设为默认
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/updateSpecialTestDefault")
	@ResponseBody
	public Map<String, Object> updateSpecialTestDefault(String testId,
			String doctorId, Integer type) {
		return appDoctorService
				.updateSpecialTestDefault(testId, doctorId, type);
	}

	/**
	 * 查询问诊单/复诊单
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/querySpecialTestByDcotorId")
	@ResponseBody
	public Map<String, Object> querySpecialTestByDcotorId(String doctorId,
			Integer type, String testId) {
		return appDoctorService.querySpecialTestByDcotorId(doctorId, type,
				testId);
	}

	/**
	 * 查询常用方
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/queryConditioningByDoctorId")
	@ResponseBody
	public Map<String, Object> queryConditioningByDoctorId(String doctorId,
			String name, Integer type, String conditioningId, String patientId,
			Integer page, Integer row) {
		return appDoctorService.queryConditioningByDoctorId(doctorId, name,
				type, conditioningId, patientId, page, row);
	}

	/**
	 * 复制问诊单/复诊单题型
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/copeSpecialTestTitle")
	@ResponseBody
	public Map<String, Object> copeSpecialTestTitle(String titleId,
			String testId, String test, String otherName, Integer isTongue,
			Integer isSurface) {
		return appDoctorService.copeSpecialTestTitle(titleId, testId, test,
				otherName, isTongue, isSurface);
	}

	/**
	 * 添加问诊单/复诊单
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/deleteSpecialTest")
	@ResponseBody
	public Map<String, Object> deleteSpecialTest(String testId, Integer type) {
		return appDoctorService.deleteSpecialTest(testId, type);
	}

	/**
	 * 添加问诊单/复诊单
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/addOrUpdateaddOrUpdateConditioning")
	@ResponseBody
	public Map<String, Object> addOrUpdateaddOrUpdateConditioning(
			String doctorId, String conditioningId, String conditioningName,
			String conditioning) {
		return appDoctorService.addOrUpdateaddOrUpdateConditioning(doctorId,
				conditioningId, conditioningName, conditioning);
	}

	/**
	 * 查询开方页面基础数据（药品、症型、复诊时间）
	 * 
	 * @return
	 */
	@RequestMapping("/queryExtractBasicData")
	@ResponseBody
	public Map<String, Object> queryExtractBasicData(
			@RequestParam(name = "lastUpdatedAt", required = false) String lastUpdatedAt,String doctorId) {
		return appDoctorService.queryExtractBasicData(lastUpdatedAt,doctorId);
	}

	/**
	 * 查询药品列表
	 * 
	 * @param name
	 * @return
	 */
	@RequestMapping("/queryDrugList")
	@ResponseBody
	public Map<String, Object> queryDrugList(String name,String doctorId) {
		return appDoctorService.queryDrugList(name,doctorId);
	}

	/**
	 * 查询药品名录
	 * 
	 * @param name
	 * @return
	 */
	@RequestMapping("/queryDrugMasters")
	@ResponseBody
	public Map<String, Object> queryDrugMasters(String doctorId,String name, Integer page,
			Integer row) {
		return appDoctorService.queryDrugMasters(doctorId,name, page, row);
	}

	/**
	 * 查询患者病历档案
	 * 
	 * @param doctorId
	 * @return
	 */
	@RequestMapping("/queryPatientServerRecords")
	@ResponseBody
	public Map<String, Object> queryPatientServerRecords(String doctorId,
			String patientId, Integer page, Integer row, String year) {
		return appDoctorService.queryPatientServerRecords(doctorId, patientId,
				page, row, year);
	}

	/**
	 * 查询处方模版处主药品列表
	 * 
	 * @return
	 */
	@RequestMapping("/queryDrugMasterList")
	@ResponseBody
	public Map<String, Object> queryDrugMasterList() {
		return appDoctorService.queryDrugMasterList();
	}

	/**
	 * 查询患者病历图像(问诊单ID)
	 * 
	 * @param doctorId
	 * @param patientId
	 * @return
	 */
	@RequestMapping("/queryPatientImg")
	@ResponseBody
	public Map<String, Object> queryPatientImg(String doctorId,
			String patientId, Integer page, Integer row) {
		return appDoctorService.queryPatientImg(doctorId, patientId, page, row);
	}

	/**
	 * 根据医生ID、患者ID查询调理方订单
	 * 
	 * @param doctorId
	 * @param patientId
	 * @return
	 */
	@RequestMapping("/queryConditionsByPatientId")
	@ResponseBody
	public Map<String, Object> queryConditionsByPatientId(String doctorId,
			String patientId, Integer page, Integer row) {
		return appDoctorService.queryConditionsByPatientId(doctorId, patientId,
				page, row);
	}

	/**
	 * 开方接口
	 * 
	 * @param conditions
	 * @param doctorId
	 * @param patientId
	 * @param goods
	 * @param diagnostics
	 * @param wzPrice
	 * @param orderType
	 * @return recordOrderNo
	 */
	@RequestMapping("/addRecipeOrder")
	@ResponseBody
	public Map<String, Object> addRecipeOrder(HttpServletRequest request,
			String conditions, String doctorId, String patientId, String goods,
			String diagnostics, Double wzPrice, Integer orderType,
			Integer visitTime, String orderNo, Integer state, String remarks,String isOld,String openId) {
		return appDoctorService.addRecipeOrder(request, conditions, doctorId,
				patientId, goods, diagnostics, wzPrice, orderType, visitTime,
				orderNo, state, remarks,isOld,openId);
	}

	/**
	 * 查询服务类型年
	 * 
	 * @param doctorId
	 * @param patientId
	 * @param page
	 * @param row
	 * @return
	 */
	@RequestMapping("/queryServerYears")
	@ResponseBody
	public Map<String, Object> queryServerYears(String doctorId,
			String patientId) {
		return appDoctorService.queryServerYears(doctorId, patientId);
	}

	/**
	 * 查询常用语
	 * 
	 * @param doctorId
	 * @return
	 */
	@RequestMapping("/queryPhrase")
	@ResponseBody
	public Map<String, Object> queryPhrase(String doctorId) {
		return appDoctorService.queryPhrase(doctorId);
	}

	/**
	 * 添加常用语
	 * 
	 * @param doctorId
	 * @return
	 */
	@RequestMapping("/addPhrase")
	@ResponseBody
	public Map<String, Object> addPhrase(String doctorId, String id,
			String content) {
		return appDoctorService.addPhrase(doctorId, id, content);
	}

	/**
	 * 删除常用语
	 * 
	 * @param doctorId
	 * @return
	 */
	@RequestMapping("/deletePhrase")
	@ResponseBody
	public Map<String, Object> deletePhrase(String doctorId, String phraseId) {
		return appDoctorService.deletePhrase(doctorId, phraseId);
	}

	/**
	 * 百宝箱我的商品选择（开药时用）
	 * 
	 * @param doctorId
	 * @return
	 */
	@RequestMapping("/queryMyGoods")
	@ResponseBody
	public Map<String, Object> queryMyGoods(String doctorId, String patientId,
			String name, Integer page, Integer row) {
		return appDoctorService.queryMyGoods(doctorId, patientId, name, page,
				row);
	}

	/**
	 * 根据医生ID查询助理是否存在
	 * 
	 * @param doctorId
	 * @return
	 */
	@RequestMapping("/checkDoctorFollowId")
	@ResponseBody
	public Map<String, Object> checkDoctorFollowId(String doctorId) {
		return appDoctorService.checkDoctorFollowId(doctorId);
	}

	/**
	 * 电话开方接口
	 * 
	 * @param doctorId
	 * @param patientId
	 * @return
	 */
	@RequestMapping("/phoneExtract")
	@ResponseBody
	public Map<String, Object> phoneExtract(String orderNo, String doctorId,
			String patientId) {
		return appDoctorService.phoneExtract(orderNo, doctorId, patientId);
	}

	/**
	 * 拍照开方
	 * 
	 * @param doctorId
	 * @param patient
	 * @param imgUrl
	 * @return
	 */
	@RequestMapping("/photoExtract")
	@ResponseBody
	public Map<String, Object> photoExtract(HttpServletRequest request,
			PhotoExtract photoExtract, String imgUrls) {
		return appDoctorService.photoExtract(request, photoExtract, imgUrls);
	}

	/**
	 * 根据医生ID条件、分页查询就诊列表
	 * 
	 * @param doctorId
	 * @param page
	 * @param row
	 * @param type
	 *            1-全部 2-待付款 3-待发货 4-待收货 5-已完成
	 * @return
	 */
	@RequestMapping("/queryJzList")
	@ResponseBody
	public Map<String, Object> queryJzList(String doctorId, Integer page,
			Integer row, Integer type) {
		return appDoctorService.queryJzList(doctorId, page, row, type);
	}

	/**
	 * 根据订单号查询药品信息
	 * 
	 * @param orderNo
	 * @return
	 */
	@RequestMapping("/queryRecord")
	@ResponseBody
	public Map<String, Object> queryRecord(String orderNo) {
		return appDoctorService.queryRecord(orderNo);
	}

	/**
	 * 根据订单号查询订单信息
	 * 
	 * @param orderNo
	 * @return
	 */
	@RequestMapping("/queryRecordOrdeNo")
	@ResponseBody
	public Map<String, Object> queryRecordOrdeNo(String orderNo) {
		return appDoctorService.queryRecordOrdeNo(orderNo);
	}

	/**
	 * 药品订单去支付
	 * 
	 * @param orderNo
	 * @return
	 */
	@RequestMapping("/addRecordOrdeNo")
	@ResponseBody
	public Map<String, Object> addRecordOrdeNo(String orderNo, String goods) {
		return appDoctorService.addRecordOrdeNo(orderNo, goods);
	}

	/**
	 * 药品订单确认订单（添加收货地址）
	 * 
	 * @param orderNo
	 * @return
	 */
	@RequestMapping("/updateRecordOrdeNo")
	@ResponseBody
	public Map<String, Object> updateRecordOrdeNo(String orderNo,
			String patientId, String shippingAddressId) {
		return appDoctorService.updateRecordOrdeNo(orderNo, patientId,
				shippingAddressId);
	}

	/**
	 * 患者最后一次订单信息
	 * 
	 * @param orderNo
	 * @return
	 */
	@RequestMapping("/queryLastOrde")
	@ResponseBody
	public Map<String, Object> queryLastOrde(String patientId, String doctorId) {
		return appDoctorService.queryLastOrde(patientId, doctorId);
	}

	/**
	 * 修改是否接单
	 * 
	 * @param doctorId
	 * @param isAccpetAsk
	 * @return
	 */
	@RequestMapping("/updateDoctorisAccpetAsk")
	@ResponseBody
	public Map<String, Object> updateDoctorisAccpetAsk(String doctorId) {
		return appDoctorService.updateDoctorisAccpetAsk(doctorId);
	}

	/**
	 * 服务订单确认下单
	 * 
	 * @param doctorId
	 * @param isAccpetAsk
	 * @return
	 */
	@RequestMapping("/addServerOrder")
	@ResponseBody
	public Map<String, Object> addServerOrder(HttpServletRequest request,
			String doctorId, String patientId, String receiptsPrice) {
		return appDoctorService.addServerOrder(request, doctorId, patientId,
				receiptsPrice);
	}

	/**
	 * 结束问诊
	 * 
	 * @param doctorId
	 * @param isAccpetAsk
	 * @return
	 */
	@RequestMapping("/updateOrderByEnd")
	@ResponseBody
	public Map<String, Object> updateOrderByEnd(HttpServletRequest request,
			String doctorId, String patientId) {
		return appDoctorService.updateOrderByEnd(doctorId, patientId);
	}

	/**
	 * 结算总计
	 * 
	 * @param doctorId
	 * @param isAccpetAsk
	 * @return
	 */
	@RequestMapping("/querySettlementTotal")
	@ResponseBody
	public Map<String, Object> querySettlementTotal(HttpServletRequest request,
			String doctorId, Integer settlementType, String startTime,
			String endTime, String checkDoctorId) {
		return appDoctorService.querySettlementTotal(doctorId, settlementType,
				startTime, endTime, checkDoctorId);
	}

	/**
	 * 结算详情
	 * 
	 * @param doctorId
	 * @param isAccpetAsk
	 * @return
	 */
	@RequestMapping("/querySettlement")
	@ResponseBody
	public Map<String, Object> querySettlement(HttpServletRequest request,
			String doctorId, Integer settlementType, String startTime,
			String endTime, String checkDoctorId, Integer page, Integer row) {
		return appDoctorService.querySettlement(doctorId, settlementType,
				startTime, endTime, checkDoctorId, page, row);
	}

	/**
	 * 通过用户id，查询用户消息纪录，带分页
	 * 
	 * @param userId
	 * @param page
	 * @param row
	 * @return
	 */
	@RequestMapping("/querySendModePage")
	@ResponseBody
	public Map<String, Object> querySendModePage(String userId, Integer type,
			@RequestParam(defaultValue = "1") Integer page,
			@RequestParam(defaultValue = "20") Integer row) {
		if (StringUtil.isEmpty(userId)) {
			//用户已被禁用
			return Util.resultMap(configCode.code_1009, null);
		}
		//查询推送消息纪录
		List<Map<String, Object>> sendModeList = appDoctorService
				.querySendModePage(userId, type, page, row);
		if (null == sendModeList) {
			//用户已被禁用
			return Util.resultMap(configCode.code_1009, null);
		}
		return Util.resultMap(configCode.code_1001, sendModeList);
	}

	/**
	 * 更新通知已读状态
	 * 
	 * @param user
	 * @return
	 */
	@RequestMapping("/updateSendMode")
	@ResponseBody
	public Map<String, Object> updateSendMode(String userId, String models) {
		//设置通知已读
		Integer i = appDoctorService.updateSendMode(userId,
				StringUtils.isEmpty(models) ? null : models.split(","));
		if (i > 0) {
			return Util.resultMap(configCode.code_1001, i);
		} else {
			return Util.resultMap(configCode.code_1002, i);
		}
	}

	/**
	 * 查询通知未读数
	 * 
	 * @param user
	 * @return
	 */
	@RequestMapping("/querySendModeByUnRead")
	@ResponseBody
	public Map<String, Object> querySendModeByUnRead(String userId, String type) {
		//查询未读通知数
		Integer i = appDoctorService.querySendModeByUnRead(userId, type);
		//发送消息
		Map<String, Object> lastMsg = appDoctorService.querySendModeByLast(
				userId, type);
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("count", i);
		map.put("lastMsg", null == lastMsg ? null : lastMsg.get("lastMsg")
				.toString());
		map.put("lastTime", null == lastMsg ? null : lastMsg.get("lastTime")
				.toString());
		if (null != i) {
			return Util.resultMap(configCode.code_1001, map);
		} else {
			return Util.resultMap(configCode.code_1002, i);
		}
	}

	/**
	 * 修改调理记录状态改为修改状态
	 * 
	 * @param recordId
	 * @return
	 */
	@RequestMapping("/updateRecipeRecordState")
	@ResponseBody
	public Map<String, Object> updateRecipeRecordState(String recordId,
			Integer state) {
		return appDoctorService.updateRecipeRecordState(recordId, state);
	}

	/**
	 * 查询作废理由列表
	 * 
	 * @return
	 */
	@RequestMapping("/queryDeleteReasons")
	@ResponseBody
	public Map<String, Object> queryDeleteReasons() {
		return appDoctorService.queryDeleteReasons();
	}

	/**
	 * 作废调理单
	 * 
	 * @param orderNo
	 * @return
	 */
	@RequestMapping("/cancleRecipeState")
	@ResponseBody
	public Map<String, Object> cancleRecipeState(HttpServletRequest request,
			String orderNo, String doctorId, String cancleNote) {
		return appDoctorService.cancleRecipeState(request, orderNo, doctorId,
				cancleNote);
	}

	/**
	 * 不涉及订单拨打电话
	 * 
	 * @param srId
	 * @param doctorId
	 * @return
	 */
	@RequestMapping("/doctorCallNoOrder")
	@ResponseBody
	public Map<String, Object> doctorCallNoOrder(String patientId,
			String doctorId) {
		return appDoctorService.doctorCallNoOrder(patientId, doctorId);
	}

	/**
	 * 查询我的粉丝列表接口
	 * 
	 * @param doctorId
	 * @param page
	 * @param row
	 * @return
	 */
	@RequestMapping("/queryFollowMembers")
	@ResponseBody
	public Map<String, Object> queryFollowMembers(String doctorId,
			Integer page, Integer row, String name) {
		return appDoctorService.queryFollowMembers(doctorId, page, row, name);
	}

	/**
	 * 查询未认证个人简介数量
	 * 
	 * @param doctorId
	 * @return
	 */
	@RequestMapping("/queryAbstractIsNotSuccess")
	@ResponseBody
	public Map<String, Object> queryAbstractIsNotSuccess(String doctorId) {
		return appDoctorService.queryAbstractIsNotSuccess(doctorId);
	}

	/**
	 * 查询最后一条医生简介记录
	 * 
	 * @param doctorId
	 * @return
	 */
	@RequestMapping("/queryLastAbstract")
	@ResponseBody
	public Map<String, Object> queryLastAbstract(String doctorId) {
		return appDoctorService.queryLastAbstract(doctorId);
	}

	/**
	 * 发送给患者（手机号）
	 * 
	 * @param doctorId
	 * @param page
	 * @param row
	 * @return
	 */
	@RequestMapping("/sendPatientByPhone")
	@ResponseBody
	public Map<String, Object> sendPatientByPhone(String phone, String orderNo) {
		return appDoctorService.sendPatientByPhone(phone, orderNo);
	}

	/**
	 * 根据医生ID就诊数量
	 * 
	 * @param doctorId
	 * @return
	 */
	@RequestMapping("/queryJzCount")
	@ResponseBody
	public Map<String, Object> queryJzCount(String doctorId) {
		return appDoctorService.queryJzCount(doctorId);
	}

	/**
	 * 根据医生ID查询新版首页统计信息
	 * 
	 * @param doctorId
	 * @return
	 */
	@RequestMapping("/queryIndexCount")
	@ResponseBody
	public Map<String, Object> queryIndexCount(String doctorId) {
		return appDoctorService.queryIndexCount(doctorId);
	}

	/**
	 * 查询历史银行卡信息
	 * 
	 * @param doctorId
	 * @param page
	 * @param row
	 * @return
	 */
	@RequestMapping("/queryBankHistorys")
	@ResponseBody
	public Map<String, Object> queryBankHistorys(String doctorId, Integer page,
			Integer row) {
		return appDoctorService.queryBankHistorys(doctorId, page, row);
	}

	/**
	 * 查询银行字典列表
	 * 
	 * @return
	 */
	@RequestMapping("/queryBankList")
	@ResponseBody
	public Map<String, Object> queryBankList() {
		return appDoctorService.queryBankList();
	}

	/**
	 * 绑定银行卡
	 * 
	 * @param bindBank
	 * @return
	 */
	@RequestMapping("/editBindBank")
	@ResponseBody
	public Map<String, Object> editBindBank(BindBank bindBank) {
		return appDoctorService.editBindBank(bindBank);
	}

	/**
	 * 绑定银行卡
	 * 
	 * @param bindBank
	 * @return
	 */
	@RequestMapping("/queryBindBankById")
	@ResponseBody
	public Map<String, Object> queryBindBankById(BindBank bindBank) {
		return appDoctorService.queryBankById(bindBank.getId());
	}

	/**
	 * 绑定银行卡
	 * 
	 * @param bindBank
	 * @return
	 */
	@RequestMapping("/queryFollowBySrId")
	@ResponseBody
	public Map<String, Object> queryFollowBySrId(String srId) {
		return appDoctorService.queryFollowBySrId(srId);
	}

	/**
	 * 查询订单二维码
	 * 
	 * @param orderNo
	 * @return
	 */
	@RequestMapping("/queryOrderQrCodeUrl")
	@ResponseBody
	public Map<String, Object> queryOrderQrCodeUrl(String orderNo) {
		return appDoctorService.queryOrderQrUrl(orderNo);
	}

	/**
	 * 查询膏方费用
	 * 
	 * @param orderNo
	 * @return
	 */
	@RequestMapping("/queryGfPriceAndDose")
	@ResponseBody
	public Map<String, Object> queryGfPriceAndDose() {
		return appDoctorService.getGfPriceAndDose();
	}

	@RequestMapping("/registerIm")
	@ResponseBody
	public Integer registerIm(HttpServletRequest request) {
		List<Map<String, Object>> list = appDoctorService
				.queryBysqlList(
						"SELECT id as doctorId from t_patient_data where state=1 and isRegisterIM=0 ORDER BY id ASC ",
						null);
		for (Map<String, Object> map : list) {
			Map<String, Object> result = GetSig.accountImportRegister(request,
					map.get("doctorId") + "", null, null);
			if (result.get("ActionStatus").toString().equals("OK")) {
				appDoctorService.update(
						"UPDATE t_patient_data set isRegisterIM=1 where id='"
								+ map.get("doctorId") + "'", null);
			}
		}
		/*
		 * GetSig.accountImport(request,"0000e15abd6d4281ac17ec7f17809332","崔凯",null
		 * );
		 */
		return 1;
	}

	/**
	 * 重复发送处方订单
	 * @param request
	 * @return
	 */
	@RequestMapping("/repeatSendRecipeOrder")
	@ResponseBody
	public Integer repeatSendRecipeOrder(HttpServletRequest request) {
		Producer.producer("DRUG-S20180906094929");// 结算分成
		/*
		 * GetSig.sendMsg(request, "28e1c8fc5e2b4935b4ea6a8442664750",
		 * "ba9941a61bf142be91e72ce7a255b8e3", "TW-O20180823085018", "王妍宇霖", 4);
		 */
		return 1;
	}
	
	/**
	 * 查看抄方订单
	 * @param request
	 * @param orderSymptom
	 * @return
	 */
	@RequestMapping("/lookCfOrder")
	@ResponseBody
	public Map<String, Object> lookCfOrder(HttpServletRequest request,
			String orderNo) {
		return appDoctorService.lookCfOrder(orderNo);
	}
	
	@RequestMapping("/repeatTsPayOrder")
	@ResponseBody
	public String repeatTsPayOrder(String memberId,String doctorId,String orderNo){
		return appDoctorService.repeatTsPayOrder(memberId, doctorId, orderNo);
	}

}
