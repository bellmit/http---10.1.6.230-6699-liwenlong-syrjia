<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p"  
	xmlns:context="http://www.springframework.org/schema/context"  
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
		http://www.springframework.org/schema/beans/spring-beans-4.2.xsd  
		http://www.springframework.org/schema/context   
		http://www.springframework.org/schema/context/spring-context-4.2.xsd 
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
		http://www.springframework.org/schema/aop     
		http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">  

	<!-- 自动扫描bean，把作了注解的类转换为bean -->  
	<context:component-scan base-package="cn.syrjia.common" />
	<context:component-scan base-package="cn.syrjia.controller" />
	<context:component-scan base-package="cn.syrjia.hospital.controller" />
	<context:component-scan base-package="cn.syrjia.alipay" />
	<context:component-scan base-package="cn.syrjia.callCenter.controller" />
	<context:component-scan base-package="cn.syrjia.sales.controller" />
	<context:component-scan base-package="cn.syrjia.wxPay.wxPay.controller" />
	<context:component-scan base-package="cn.syrjia.wxPay.wxPayReceive.controller" />
	<context:component-scan base-package="cn.syrjia.util" />
	
	<!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->  
    <bean id="mappingJackson2HttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">  
        <!-- <property name="objectMapper" value="#{jsonUtil.mapper}"/> -->
        <property name="supportedMediaTypes">  
            <list>  
                <value>text/json;charset=UTF-8</value>
                <value>text/html;charset=UTF-8</value>  
                <value>text/plain;charset=UTF-8</value>
                <value>application/json;charset=UTF-8</value>
            </list>  
        </property>  
    </bean>  
    <!-- 
	<mvc:annotation-driven>
		<mvc:message-converters register-defaults="true">
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<property name="supportedMediaTypes" value = "text/plain;charset=UTF-8" />
			</bean>
		</mvc:message-converters>
    </mvc:annotation-driven>
     -->
    <!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->  
 <bean
  class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">  
            <list>  
                <ref bean="mappingJackson2HttpMessageConverter" /><!-- json转换器 -->  
            </list>  
        </property>  
    </bean>
	
	<!-- 默认的注解映射的支持 -->  
	<!-- <mvc:annotation-driven /> -->
   <!--  <mvc:annotation-driven>  
        <mvc:message-converters>  
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">  
                <constructor-arg ref="utf8Charset" />  
            </bean>  
        </mvc:message-converters>  
    </mvc:annotation-driven>   -->
    <!-- 解决@ResponseBody返回String字符串乱码问题 -->
    <bean id="utf8Charset" class="java.nio.charset.Charset"  
           factory-method="forName">  
           <constructor-arg value="UTF-8"/>  
	</bean>
	
    <bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver" p:defaultEncoding="UTF-8">
		<!-- 设置上传文件的最大尺寸为100MB -->
		<property name="maxUploadSize">
			<value>104857600</value>
		</property>
	</bean>
     <!-- SpringMVC在超出上传文件限制时，会抛出org.springframework.web.multipart.MaxUploadSizeExceededException -->
	<!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的，而且此时还没有进入到Controller方法中 -->
	<bean id="exceptionResolver"
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<!-- 遇到MaxUploadSizeExceededException异常时，自动跳转到/WEB-INF/jsp/error_fileupload.jsp页面 -->
				<prop
					key="org.springframework.web.multipart.MaxUploadSizeExceededException">error_fileupload</prop>
			</props>
		</property>
	</bean>
	
	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 责根据 Bean 中的 Spring MVC 注解对 Bean 进行加工处理，使这些 Bean 变成控制器并映射特定的 URL 请求。 -->  
	<!-- <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />--> 
    
    <!-- 启动对@AspectJ注解的支持 -->  
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <!-- 启动 @AspectJ 支持 --> 
 	<!-- <bean class="org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator"/> -->
    
	<!-- 对模型视图名称的解析，在请求时模型视图名称添加前后缀 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" 
		p:order="100" p:viewClass="org.springframework.web.servlet.view.JstlView" 
		p:prefix="/" p:suffix=".jsp" />
	<!-- 拦截器 -->  
	<!-- 利用mvc:interceptors标签声明一系列的拦截器，然后它们就可以形成一个拦截器链，
	拦截器的执行顺序是按声明的先后顺序执行的，先声明的拦截器中的preHandle方法会先执行，然而它的postHandle方法和afterCompletion方法却会后执行。 -->     
	<mvc:interceptors>
		<!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 -->
		<mvc:interceptor>
			<mvc:mapping path="/*/*.action"/>
			<mvc:mapping path="/*/*/*.action"/>
			<bean class="cn.syrjia.interceptor.StopWatchHandlerInterceptor"/>
		</mvc:interceptor>
		<!--  -->
		<!-- 使用mvc:interceptor标签进行声明。使用这种方式进行声明的Interceptor可以通过mvc:mapping子标签来定义需要进行拦截的请求路径。 -->
		<!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 -->
	</mvc:interceptors>
</beans>