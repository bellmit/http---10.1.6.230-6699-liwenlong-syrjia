package cn.syrjia.hospital.service;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import cn.syrjia.common.BaseServiceInterface;
import cn.syrjia.entity.Evaluate;
import cn.syrjia.entity.LoginLog;
import cn.syrjia.hospital.entity.BindBank;
import cn.syrjia.hospital.entity.DoctorAbstractRecord;
import cn.syrjia.hospital.entity.DoctorApplyRecord;
import cn.syrjia.hospital.entity.DoctorNotice;
import cn.syrjia.hospital.entity.DoctorPatient;
import cn.syrjia.hospital.entity.DoctorSet;
import cn.syrjia.hospital.entity.DoctorZzData;
import cn.syrjia.hospital.entity.PhotoExtract;

public interface AppDoctorService extends BaseServiceInterface {

	/**
	 * 根据医生Id查询患者列表
	 * 
	 * @param doctorId
	 * @param _sign
	 * @param page
	 * @param row
	 * @return
	 */
	public abstract Map<String, Object> queryPatientListById(String doctorId,
			String _sign, Integer page, Integer row, String name);

	/**
	 * 根据患者ID查询患者管理信息
	 * 
	 * @param patientId
	 * @param page
	 * @param row
	 * @return
	 */
	public abstract Map<String, Object> queryPatientManageById(String patientId,String doctorId);

	/**
	 * 根据患者ID查询患者信息
	 * 
	 * @param patientId
	 * @return
	 */
	public abstract Map<String, Object> queryPatientById(String patientId);

	/**
	 * 编辑患者管理中信息（特别关注等）
	 * 
	 * @param patientId
	 * @return
	 */
	public abstract Map<String,Object> editPatientManage(DoctorPatient docPatient);

	/**
	 * 查询医生发送的通知
	 * @param doctorId
	 * @return
	 */
	public abstract Integer queryDoctorSendNotice(String doctorId);

	/**
	 * 查询通知列表
	 * @param doctorId
	 * @param state
	 * @param page
	 * @param row
	 * @return
	 */
	public abstract List<Map<String, Object>> queryNoticeList(String doctorId,Integer state,
			Integer page, Integer row);

	/**
	 * 编辑通知
	 * @param doctorNotice
	 * @return
	 */
	public abstract Map<String, Object> editNotice(DoctorNotice doctorNotice);

	/**
	 * 查询通知详情
	 * @param id
	 * @return
	 */
	public abstract Map<String, Object> queryNoticeDetail(String id);

	/**
	 * 通过ID删除通知
	 * @param id
	 * @return
	 */
	public abstract Map<String, Object> deleteNoticeById(String id);

	/**
	 * 查询公告每天发送数量
	 * 
	 * @param doctorId
	 * @return
	 */
	public abstract Map<String, Object> checkNoticeDaySendCount(String doctorId);
	
	/**
	 * 回复用户评价
	 * @param evaluate
	 * @return
	 */
	public abstract Map<String,Object> replyMemberEva(Evaluate evaluate,String repalyContent);
	
	/**
	 * 修改评价状态
	 * @param evaluate
	 * @return
	 */
	public abstract Map<String,Object> updateEvaState(Evaluate evaluate);
	
	/**
	 * 验证医生手势密码、数字密码是否正确
	 * @param doctorSet
	 * @return
	 */
	public abstract Map<String,Object> checkDoctorPassword(DoctorSet doctorSet);
	
	/**
	 * 根据医生ID查询医生评价统计信息
	 * 
	 * @param doctorId
	 * @return
	 */
	public abstract Map<String, Object> queryDoctorEvaCensus(String doctorId);

	/**
	 * 根据医生ID查询医生评价信息（详情页面与评价列表共用）
	 * 
	 * @param doctorId
	 * @return
	 */
	public abstract Map<String, Object> queryDoctorEvaList(String doctorId,
			Integer row, Integer page, String _sign);
	
	/**
	 * 编辑医生坐诊信息
	 * 
	 * @param zzData
	 * @return
	 */
	public abstract Map<String, Object> editDoctorZzData(DoctorZzData zzData,String zzDates);
	
	/**
	 * 查询医生认证信息基本数据
	 * 
	 * @return
	 */
	public abstract Map<String, Object> queryDoctorAuthData();

	/**
	 * 根据医生ID获取医生认证信息
	 * 
	 * @param id
	 * @return
	 */
	public abstract Map<String, Object> queryDoctorApplyData(String doctorId);

	/**
	 * 根据医生ID获取医生个人信息（医馆APP个人中心用）
	 * 
	 * @param id
	 * @return
	 */
	public abstract Map<String, Object> queryOneDoctor(String doctorId);

	/**
	 * 修改医生头像
	 * 
	 * @param doctor
	 * @return
	 */
	public abstract Map<String, Object> updateDoctor(String doctorId,
			String localUrl, String url, String phone);

	/**
	 * 检验医生认证时医生名称是否重复
	 * 
	 * @param docName
	 * @param doctorId
	 * @return
	 */
	public abstract Map<String, Object> checkApplyDocName(String docName,
			String doctorId);

	/**
	 * 医生修改手机号验证(检验老手机号是否正确)
	 * 
	 * @param oldPhone
	 * @param newPhone
	 * @param doctorId
	 * @return
	 */
	public abstract Map<String, Object> checkDoctorPhone(String oldPhone,
			String doctorId, String newPhone);

	/**
	 * 获取手机验证码
	 * 
	 * @param request
	 * @param doctorId
	 * @param phone
	 * @param type
	 * @return
	 */
	public abstract Map<String, Object> getPhoneCode(
			HttpServletRequest request, String doctorId, String phone,
			Integer type);

	/**
	 * 医生端APP登录接口
	 * 
	 * @param request
	 * @param loginName
	 * @param code
	 * @param loginLog
	 * @return
	 */
	public abstract Map<String, Object> login(HttpServletRequest request,
			String loginName, String code, LoginLog loginLog);
	
	/**
	 * 医生注册接口
	 * 
	 * @param request
	 * @param loginName
	 * @param code
	 * @param loginLog
	 * @return
	 */
	public abstract Map<String, Object> register(HttpServletRequest request,
			String phone,String docName,String srId,String code);

	/**
	 * 编辑医生认证信息
	 * 
	 * @param request
	 * @param record
	 * @param followId
	 * @param lastId
	 * @param _lastType
	 * @return
	 */
	public abstract Map<String, Object> addApplyDoc(HttpServletRequest request,
			DoctorApplyRecord record, String pid, String lastId,
			Integer _lastType, String doctorId);
	
	/**
	 * 修改医生认证、基础信息
	 * 
	 * @param request
	 * @param record
	 * @return
	 */
	public abstract Map<String, Object> editApplyDoc(HttpServletRequest request,
			DoctorApplyRecord record,Integer type,String doctorId);

	/**
	 * 编辑医生公告信息
	 * 
	 * @param doctorAbstractRecord
	 * @return
	 */
	public abstract Map<String, Object> editDocDesc(
			DoctorAbstractRecord doctorAbstractRecord,String srId);

	/**
	 * 修改医生手机号
	 * 
	 * @param request
	 * @param phone
	 * @param code
	 * @param doctorId
	 * @return
	 */
	public abstract Map<String, Object> updateDocPhone(
			HttpServletRequest request, String phone, String code,
			String doctorId);

	/**
	 * 验证老手机号、验证码是否正确
	 * 
	 * @param phone
	 * @param doctorId
	 * @param code
	 * @return
	 */
	public abstract Map<String, Object> validateCode(String phone,
			String doctorId, String code);

	/**
	 * 退出登录
	 * 
	 * @param doctorId
	 * @return
	 */
	public abstract Map<String, Object> loginOut(String oldToken,String userId);
	
	/**
	 * 编辑医生线上调理设置信息
	 * 
	 * @param doctorSet
	 * @return
	 */
	public abstract Map<String, Object> editDoctorSet(DoctorSet doctorSet,String type);
	
	/**
	 * 查询一周日期
	 * @return
	 */
	public abstract Map<String, Object> queryWeekData();
	
	/**
	 * 根据医生ID查询医生14天出诊状态
	 * @param doctorId
	 * @return
	 */
	public abstract Map<String, Object> queryFourTeenZzStatus(String doctorId);
	
	/**
	 * 删除坐诊信息
	 * @param doctorId
	 * @param state
	 * @return
	 */
	public abstract Map<String, Object> updateDoctroZzState(String id);
	
	/**
	 * 获取医院列表
	 * @return
	 */
	public abstract Map<String,Object> queryInfirmaryList(String name,Integer page,Integer row);
	
	/**
	 * 根据坐诊ID查询坐诊信息
	 * @param id
	 * @return
	 */
	public abstract Map<String,Object> queryDoctorZzDataById(String id);
	
	/**
	 * 查询医生坐诊信息
	 * @param doctroId
	 * @param zzDate
	 * @return
	 */
	public abstract Map<String, Object> queryDoctorZzList(String doctroId, String zzDate);
	
	/**
	 * 查询专业练习
	 * @param doctroId
	 * @param type
	 * @return
	 */
	public abstract Map<String, Object> querySpecialTest(String doctroId,Integer type);
	
	/**
	 * 查询专业课程
	 * @param name
	 * @param page
	 * @param row
	 * @return
	 */
	public abstract Map<String, Object> querySpecialTestClassic(String name,Integer page,Integer row);
	
	/**
	 * 查询专业练习详情
	 * @param testId
	 * @return
	 */
	public abstract Map<String, Object> querySpecialTestDetail(String testId);
	
	/**
	 * 通过id查询专业练习详情
	 * @param testId
	 * @return
	 */
	public abstract Map<String, Object> querySpecialTestDetailById(String testId);
	
	/**
	 * 查询调理方详细
	 * @param conditioningId
	 * @return
	 */
	public abstract Map<String, Object> queryConditioningDetail(String conditioningId);
	
	/**
	 * 查询和更新专业练习
	 * @param doctorId
	 * @param type
	 * @param isSurface
	 * @param isTongue
	 * @param otherName
	 * @param isOther
	 * @param testId
	 * @param testName
	 * @param test
	 * @return
	 */
	public abstract Map<String,Object> addOrUpdateSpecialTest(String doctorId,Integer type,Integer isSurface,Integer isTongue,String otherName,Integer isOther,String testId,String testName,String test);
	
	/**
	 * 删除专业练习
	 * @param testId
	 * @param type
	 * @return
	 */
	public abstract Map<String,Object> deleteSpecialTest(String testId,Integer type);
	
	/**
	 * 添加和更新调理方
	 * @param doctorId
	 * @param conditioningId
	 * @param conditioningName
	 * @param conditioning
	 * @return
	 */
	public abstract Map<String,Object> addOrUpdateaddOrUpdateConditioning(String doctorId,String conditioningId,String conditioningName,String conditioning);
	
	/**
	 * 更新默认专业练习
	 * @param testId
	 * @param doctorId
	 * @param type
	 * @return
	 */
	public abstract Map<String,Object> updateSpecialTestDefault(String testId,String doctorId,Integer type);
	
	/**
	 * 更新默认的调理方
	 * @param conditioningId
	 * @param doctorId
	 * @return
	 */
	public abstract Map<String,Object> updateConditioningDefault(String conditioningId,String doctorId);
	
	/**
	 * 通过医生id查询专业练习
	 * @param doctorId
	 * @param type
	 * @param testId
	 * @return
	 */
	public abstract Map<String,Object> querySpecialTestByDcotorId(String doctorId,Integer type,String testId);
	
	/**
	 * 通过医生ID查询调理方
	 * @param doctorId
	 * @param name
	 * @param type
	 * @param conditioningId
	 * @param patientId
	 * @param page
	 * @param row
	 * @return
	 */
	public abstract Map<String,Object> queryConditioningByDoctorId(String doctorId,String name,Integer type,String conditioningId,String patientId,Integer page,Integer row);
	
	/**
	 * 赋值标题
	 * @param titleId
	 * @param testId
	 * @param test
	 * @param otherName
	 * @param isTongue
	 * @param isSurface
	 * @return
	 */
	public abstract Map<String,Object> copeSpecialTestTitle(String titleId,String testId,String test,String otherName,Integer isTongue,Integer isSurface);
	
	/**
	 * 删除调理方
	 * @param conditioningId
	 * @return
	 */
	public abstract Map<String,Object> deleteConditioning(String conditioningId);
	
	/**
	 * 查询开方页面基础数据（药品、症型、复诊时间）
	 * @param diagnostic
	 * @return
	 */
	public abstract Map<String,Object> queryExtractBasicData(String clientLastUpdatedAt,String doctorId);

	/**
	 * 查询药品列表(开方用)
	 * @param name
	 * @return
	 */
	public abstract Map<String,Object> queryDrugList(String name,String doctorId);
	
	/**
	 * 查询患者病历档案
	 * @param doctorId
	 * @return
	 */
	public abstract Map<String,Object> queryPatientServerRecords(String doctorId,String patientId,Integer page,Integer row,String year);

	/**
	 * 查询处方模版处主药品列表
	 * @return
	 */
	public abstract Map<String,Object> queryDrugMasterList();
	
	/**
	 * 查询主药
	 * @param name
	 * @param page
	 * @param row
	 * @return
	 */
	public abstract Map<String,Object> queryDrugMasters(String doctorId,String name,Integer page,Integer row);
	
	/**
	 * 查询患者病历图像(问诊单ID)
	 * @param doctorId
	 * @param patientId
	 * @return
	 */
	public abstract Map<String,Object> queryPatientImg(String doctorId,String patientId,Integer page,Integer row);
	
	/**
	 * 根据医生ID、患者ID查询调理方订单
	 * @param doctorId
	 * @param patientId
	 * @return
	 */
	public abstract Map<String,Object> queryConditionsByPatientId(String doctorId,String patientId,Integer page,Integer row);
	
	/**
	 * 添加调理方订单
	 * @param conditions
	 * @param doctorId
	 * @param patientId
	 * @param goods
	 * @param diagnostics
	 * @param wzPrice
	 * @return
	 */
	public abstract Map<String,Object> addRecipeOrder(HttpServletRequest request,String conditions,String doctorId,String patientId,String goods,String diagnostics,Double wzPrice,Integer orderType,Integer visitTime,String orderNo,Integer state,String remarks,String isOld,String openId);
	
	/**
	 * 查询服务类型年
	 * @param doctorId
	 * @param patientId
	 * @param page
	 * @param row
	 * @return
	 */
	public abstract Map<String,Object> queryServerYears(String doctorId,String patientId);
	
	/**
	 * 查询常用语
	 * @param doctorId
	 * @return
	 */
	Map<String,Object> queryPhrase(String doctorId);
	
	/**
	 * 添加常用语
	 * @param doctorId
	 * @param content
	 * @return
	 */
	Map<String,Object> addPhrase(String doctorId,String id,String content);
	
	
	/**
	 * 删除常用语
	 * @param doctorId
	 * @param phraseId
	 * @return
	 */
	Map<String,Object> deletePhrase(String doctorId,String phraseId);
	
	/**
	 * 百宝箱我的商品选择（开药时用）
	 * @param doctorId
	 * @return
	 */
	Map<String,Object> queryMyGoods(String doctorId,String patientId,String name,Integer page,Integer row);
	
	/**
	 * 点击助理提交修改状态
	 * @param applyRecord
	 * @return
	 */
	public abstract Map<String,Object> updateApplyRecordState(DoctorApplyRecord applyRecord);
	
	/**
	 * 根据医生ID查询助理是否存在
	 * @param doctorId
	 * @return
	 */
	public abstract Map<String,Object> checkDoctorFollowId(String doctorId);
	
	/**
	 * 电话开方接口
	 * @param doctorId
	 * @param patientId
	 * @return
	 */
	public abstract Map<String,Object> phoneExtract(String orderNo,String doctorId,String patientId);

	/**
	 * 拍照开方
	 * @param doctorId
	 * @param patient
	 * @param imgUrl
	 * @return
	 */
	public abstract Map<String,Object> photoExtract(HttpServletRequest request,PhotoExtract photoExtract,String imgUrls);

	/**
	 * 根据医生ID条件、分页查询就诊列表
	 * @param doctorId
	 * @param page
	 * @param row
	 * @param type 1-全部 2-待付款 3-待发货 4-待收货 5-已完成
	 * @return
	 */
	public abstract Map<String,Object> queryJzList(String doctorId,Integer page,Integer row,Integer type);
	
	/**
	 * 查询记录
	 * @param orderNo
	 * @return
	 */
	public abstract Map<String,Object> queryRecord(String orderNo);
	
	/**
	 * 通过订单号查询记录
	 * @param orderNo
	 * @return
	 */
	public abstract Map<String,Object> queryRecordOrdeNo(String orderNo);
	
	/**
	 * 添加订单记录
	 * @param orderNo
	 * @param goods
	 * @return
	 */
	public abstract Map<String,Object> addRecordOrdeNo(String orderNo,String goods);
	
	/**
	 * 更新订单记录
	 * @param orderNo
	 * @param patientId
	 * @param shippingAddressId
	 * @return
	 */
	Map<String,Object> updateRecordOrdeNo(String orderNo,String patientId,String shippingAddressId);
	
	/**
	 * 
	 * @param request
	 * @param doctorId
	 * @param patientId
	 * @param receiptsPrice
	 * @return
	 */
	Map<String,Object> addServerOrder(HttpServletRequest request,String doctorId,String patientId,String receiptsPrice);
	
	/**
	 * 通过医生id和患者id更新订单
	 * @param doctorId
	 * @param patientId
	 * @return
	 */
	Map<String,Object> updateOrderByEnd(String doctorId,String patientId);
	
	/**
	 * 查询总结算
	 * @param doctorId
	 * @param settlementType
	 * @param startTime
	 * @param endTime
	 * @param checkDoctorId
	 * @return
	 */
	Map<String,Object> querySettlementTotal(String doctorId,Integer settlementType,String startTime,String endTime,String checkDoctorId);

	/**
	 * 查询结算
	 * @param doctorId
	 * @param settlementType
	 * @param startTime
	 * @param endTime
	 * @param checkDoctorId
	 * @param page
	 * @param row
	 * @return
	 */
	Map<String,Object> querySettlement(String doctorId,Integer settlementType,String startTime,String endTime,String checkDoctorId,Integer page,Integer row);
	
	/**
	 * 查询默认的专业
	 * @param doctorId
	 * @param type
	 * @return
	 */
	String queryDefultSpecial(String doctorId,Integer type);
	
	/**
	 * 查询最新订单
	 * @param patientId
	 * @param doctorId
	 * @return
	 */
	public abstract Map<String,Object> queryLastOrde(String patientId,String doctorId);
	
	/**
	 *  查询推送消息纪录
	 * @param userId
	 * @param page
	 * @param row
	 * @return
	 */
	public abstract List<Map<String, Object>> querySendModePage(String userId,Integer type,Integer page,Integer row);
	
	/**
	 * 设置通知已读
	 * @param loginName
	 * @return
	 */
	public Integer updateSendMode(String userId,String[] models);
	
	/**
	 * 查询未读通知数
	 * @param userId
	 * @return
	 */
	public Integer querySendModeByUnRead(String userId,String type);
	
	/**
	 * 查询发送的模板
	 * @param userId
	 * @param type
	 * @return
	 */
	public Map<String,Object> querySendModeByLast(String userId,String type);

	/**
	 * 修改是否接单
	 * @param doctorId
	 * @param isAccpetAsk
	 * @return
	 */
	public abstract Map<String,Object> updateDoctorisAccpetAsk(String doctorId);
	
	/**
	 * 修改调理记录状态改为修改状态
	 * @param recordId
	 * @return
	 */
	public abstract Map<String,Object> updateRecipeRecordState(String recordId,Integer state);
	
	/**
	 * 查询作废理由列表
	 * @return
	 */
	public abstract Map<String,Object> queryDeleteReasons();
	
	/**
	 * 作废调理单
	 * @param orderNo
	 * @return
	 */
	public abstract Map<String,Object> cancleRecipeState(HttpServletRequest request,String orderNo,String doctorId,String cancleNote);
 	
	/**
	 * 不涉及订单拨打电话
	 * @param srId
	 * @param doctorId
	 * @return
	 */
	public abstract Map<String,Object> doctorCallNoOrder(String patientId,String doctorId);

	/**
	 * 查询我的粉丝列表接口
	 * @param doctorId
	 * @param page
	 * @param row
	 * @return
	 */
	public abstract Map<String,Object> queryFollowMembers(String doctorId,Integer page,Integer row,String name);

	/**
	 * 查询未认证个人简介数量
	 * @param doctorId
	 * @return
	 */
	public abstract Map<String,Object> queryAbstractIsNotSuccess(String doctorId);
	
	/**
	 * 查询最后一条医生简介记录
	 * @param doctorId
	 * @return
	 */
	public abstract Map<String,Object> queryLastAbstract(String doctorId);
	
	/**
	 * 通过手机号发送患者
	 * @param phone
	 * @param orderNo
	 * @return
	 */
	public abstract Map<String,Object> sendPatientByPhone(String phone,String orderNo);
	
	/**
	 * 根据医生ID就诊数量
	 * @param doctorId
	 * @return
	 */
	public abstract Map<String,Object> queryJzCount(String doctorId);
	
	/**
	 * 根据医生ID查询新版首页统计信息
	 * @param doctorId
	 * @return
	 */
	public abstract Map<String,Object> queryIndexCount(String doctorId);
	
	/**
	 * 查询历史银行卡信息
	 * @param doctorId
	 * @param page
	 * @param row
	 * @return
	 */
	public abstract Map<String,Object> queryBankHistorys(String doctorId,Integer page,Integer row);
	
	/**
	 * 查询银行字典列表
	 * @return
	 */
	public abstract Map<String,Object> queryBankList();
	
	/**
	 * 绑定银行卡
	 * @param bindBank
	 * @return
	 */
	public abstract Map<String,Object> editBindBank(BindBank bindBank);
	
	/**
	 * 通过助理id查询关注的患者
	 * @param srId
	 * @return
	 */
	public abstract Map<String,Object> queryFollowBySrId(String srId);
	
	/**
	 * 查询订单二维码
	 * @param orderNo
	 * @return
	 */
	public abstract Map<String,Object> queryOrderQrUrl(String orderNo);
	
	/**
	 * 根据手机号查询关联医生数量
	 * @param phone
	 * @return
	 */
	public abstract Integer queryDocCountByPhone(String phone);
	
	/**
	 * 获取膏方费
	 * @return
	 */
	public abstract Map<String,Object> getGfPriceAndDose();
	
	/**
	 * 重复发送处方订单
	 * @return
	 */
	public abstract Integer repeatSendRecipeOrder();
	
	/**
	 * 查询银行卡信息单个
	 * @param id
	 * @return
	 */
	public abstract Map<String,Object> queryBankById(String id);
	/**
	 * 根据订单号查询抄方申请
	 * @param orderNo
	 * @return
	 */
	public abstract Map<String, Object> lookCfOrder(  String orderNo);
	
	public abstract String repeatTsPayOrder(String memberId,String doctorId,String orderNo);

	
}
