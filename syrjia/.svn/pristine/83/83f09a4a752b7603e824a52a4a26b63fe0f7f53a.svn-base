<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
	   xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:task="http://www.springframework.org/schema/task"
	   xsi:schemaLocation="
          http://www.springframework.org/schema/beans     
          http://www.springframework.org/schema/beans/spring-beans-4.2.xsd     
          http://www.springframework.org/schema/tx     
          http://www.springframework.org/schema/tx/spring-tx-4.2.xsd    
          http://www.springframework.org/schema/context     
          http://www.springframework.org/schema/context/spring-context-4.2.xsd     
          http://www.springframework.org/schema/aop     
          http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
          http://www.springframework.org/schema/task  
		  http://www.springframework.org/schema/task/spring-task-4.2.xsd"
	   default-autowire="byName" >
	<!-- <context:component-scan/> 扫描指定的包中的类上的注解，常用的注解有： @Controller 声明Action组件 
		@Service 声明Service组件 @Service("myMovieLister") @Repository 声明Dao组件 @Component 
		泛指组件, 当不好归类时. @RequestMapping("/menu") 请求映射 @PathVariable 绑定输入参数，非常适合Restful风格 
		@Resource 用于注入，( j2ee提供的 ) 默认按名称装配，@Resource(name="beanName") @Autowired 
		用于注入，(srping提供的) 默认按类型装配 @Transactional( rollbackFor={Exception.class}) 事务管理 
		@ResponseBody @Scope("prototype") 设定bean的作用域 -->
	<!-- task任务扫描注解 -->
	<task:annotation-driven/>
	<context:component-scan base-package="cn.syrjia.common" />
	<context:component-scan base-package="cn.syrjia.service" />
	<context:component-scan base-package="cn.syrjia.dao" />
	<context:component-scan base-package="cn.syrjia.hospital.service" />
	<context:component-scan base-package="cn.syrjia.hospital.dao" />
	<context:component-scan base-package="cn.syrjia.callCenter.service" />
	<context:component-scan base-package="cn.syrjia.callCenter.dao" />
	<context:component-scan base-package="cn.syrjia.sales.service" />
	<context:component-scan base-package="cn.syrjia.sales.dao" />
	<context:component-scan base-package="cn.syrjia.wxPay.wxPay.service" />
	<context:component-scan base-package="cn.syrjia.wxPay.wxPay.dao" />
	<context:component-scan base-package="cn.syrjia.wxPay.wxPayReceive.service" />
	<context:component-scan base-package="cn.syrjia.wxPay.wxPayReceive.dao" />
	<context:component-scan base-package="cn.syrjia.interceptor" />
	<context:component-scan base-package="cn.syrjia.quartz"/>
	<context:component-scan base-package="cn.syrjia.util.Util" />
	<context:component-scan base-package="cn.syrjia.util.GetSig" />
	<!-- <bean id="sessionManage" class="cn.com.util.session.SessionManageImpl" 
		/> -->
	<!-- 启动对@AspectJ注解的支持 -->
	<!--<aop:aspectj-autoproxy proxy-target-class="true" /> -->


	<!-- 数据库 jdbcTemplate -->
	<!-- -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>


	<!-- 需要做session共享时把此处放开 redis版本必须大于2.8 -->
	<context:annotation-config/>

	<bean class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration"/>

	<!-- <bean id="lettuceConnectionFactory"
		class="org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory"
		p:host-name="mobile.syrjia.cn" p:password="jgredis"  p:port="6379" /> -->
	<bean id="lettuceConnectionFactory"
		  class="org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory"
		  p:host-name="172.17.59.70" p:password="jgredis"  p:port="6379" />

	<!-- *********************数据事物处理配置*********************** -->
	<bean id="txManager"
		  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 注解方式 -->
	<!-- 作用是注册事务注解处理器 -->
	<tx:annotation-driven transaction-manager="txManager" />

	<!--  <bean id="taskTest" class="cn.syrjia.quartz.ExampleTask"></bean>   -->

	<bean id="jobFactory" class="cn.syrjia.util.JobFactory"></bean>

	<bean name="quartzScheduler" lazy-init="false" autowire="no" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="jobFactory" ref="jobFactory"></property>
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="applicationContextSchedulerContextKey" value="applicationContext" />
		<property name="quartzProperties">
			<props>
				<prop key="org.quartz.scheduler.instanceName">CRMscheduler</prop>
				<prop key="org.quartz.scheduler.instanceId">AUTO</prop>
				<!-- 线程池配置 -->
				<prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>
				<prop key="org.quartz.threadPool.threadCount">20</prop>
				<prop key="org.quartz.threadPool.threadPriority">5</prop>
				<prop key="org.quartz.jobStore.misfireThreshold">120000</prop>
				<!-- JobStore 配置 -->
				<prop key="org.quartz.jobStore.class">org.quartz.impl.jdbcjobstore.JobStoreTX</prop>
				<!-- 集群配置
                <prop key="org.quartz.jobStore.isClustered">true</prop>  
                <prop key="org.quartz.jobStore.clusterCheckinInterval">15000</prop>  
                <prop key="org.quartz.jobStore.maxMisfiresToHandleAtATime">1</prop>  -->
				<!-- 数据表设置 -->
				<prop key="org.quartz.jobStore.tablePrefix">qrtz_</prop>
				<!--  <prop key="org.quartz.jobStore.dataSource">qzDS</prop>  -->
			</props>
		</property>
		<!--可选，QuartzScheduler启动时更新己存在的Job，这样就不用每次修改targetObject后删除qrtz_job_details表对应记录了 -->
		<property name="overwriteExistingJobs" value="true" />

		<!--设置自动启动 -->
		<property name="autoStartup" value="true" />
	</bean>


	<!-- <task:scheduled-tasks>
        <task:scheduled ref="taskTest" method="test" cron="0/5 * * * * ?" />  
    </task:scheduled-tasks> or execution(* cn.syrjia.hospital.controller.*.*(..))-->
	<bean id="verifyInterceptor" class="cn.syrjia.security.VerifyInterceptor" />
	<aop:config>
		<aop:aspect id="verifyAspect" ref="verifyInterceptor">
			<aop:pointcut id="target"
						  expression="execution(* cn.syrjia.controller.*.*(..)) or execution(* cn.syrjia.hospital.controller.*.*(..)) or execution(* cn.syrjia.sales.controller.*.*(..)) " />
			<aop:around method="verifySign"
						pointcut-ref="target"/>
		</aop:aspect>
	</aop:config>
	<bean id="verifyCallCenterInterceptor" class="cn.syrjia.security.VerifyCallCenterInterceptor" />
	<aop:config>
		<aop:aspect id="verifyCallCenterAspect" ref="verifyCallCenterInterceptor">
			<aop:pointcut id="callCentertarget"
						  expression="execution(* cn.syrjia.callCenter.controller.*.*(..)) " />
			<aop:around method="verifyCallCenterSign"
						pointcut-ref="callCentertarget"/>
		</aop:aspect>
	</aop:config>
</beans>
